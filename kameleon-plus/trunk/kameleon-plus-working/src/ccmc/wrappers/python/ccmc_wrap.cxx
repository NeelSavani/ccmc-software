/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
  return wrapper(a, NULL);			\
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)	\
SWIGINTERN void					\
wrapper##_closure(PyObject *a) {		\
    SwigPyObject *sobj;				\
    sobj = (SwigPyObject *)a;			\
    if (sobj->own) {				\
	PyObject *o = wrapper(a, NULL);		\
	Py_XDECREF(o);				\
    }						\
    PyObject_Del(a);				\
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)				\
SWIGINTERN int							\
wrapper##_closure(PyObject *a) {				\
    PyObject *pyresult;						\
    int result;							\
    pyresult = wrapper(a, NULL);				\
    result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;	\
    Py_XDECREF(pyresult);					\
    return result;						\
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a, PyObject *b) {	\
    PyObject *tuple, *result;			\
    tuple = PyTuple_New(1);			\
    assert(tuple);				\
    PyTuple_SET_ITEM(tuple, 0, b);		\
    Py_XINCREF(b);				\
    result = wrapper(a, tuple);			\
    Py_DECREF(tuple);				\
    return result;				\
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(b);						\
    Py_XINCREF(c);						\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *callable_object, PyObject *args, PyObject *) {	\
    return wrapper(callable_object, args);			\
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_closure(PyObject *a) {			\
    PyObject *resultobj;				\
    Py_ssize_t result;					\
    resultobj = wrapper(a, NULL);			\
    result = PyNumber_AsSsize_t(resultobj, NULL);	\
    Py_DECREF(resultobj);				\
    return result;					\
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));		\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) { \
    PyObject *tuple, *resultobj;					\
    int result;								\
    tuple = PyTuple_New(d ? 3 : 2);					\
    assert(tuple);							\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));			\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));			\
    if (d) {								\
        PyTuple_SET_ITEM(tuple, 2, d);					\
        Py_INCREF(d);							\
    }									\
    resultobj = wrapper(a, tuple);					\
    result = resultobj ? 0 : -1;					\
    Py_DECREF(tuple);							\
    Py_XDECREF(resultobj);						\
    return result;							\
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *tuple, *result;				\
    tuple = PyTuple_New(1);				\
    assert(tuple);					\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));	\
    result = wrapper(a, tuple);				\
    Py_DECREF(tuple);					\
    return result;					\
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *arg, *result;				\
    arg = _PyLong_FromSsize_t(b);			\
    result = wrapper(a, arg);				\
    Py_DECREF(arg);					\
    return result;					\
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(c);						\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(c ? 2 : 1);				\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    Py_XINCREF(b);						\
    if (c) {							\
        PyTuple_SET_ITEM(tuple, 1, c);				\
        Py_XINCREF(c);						\
    }								\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    return wrapper(a, NULL);			\
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)	\
SWIGINTERN long					\
wrapper##_closure(PyObject *a) {		\
    PyObject *pyresult;				\
    long result;				\
    pyresult = wrapper(a, NULL);		\
    if (!pyresult || !PyLong_Check(pyresult))	\
	return -1;				\
    result = PyLong_AsLong(pyresult);		\
    Py_DECREF(pyresult);			\
    return result;				\
}

#define SWIGPY_ITERNEXT_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    PyObject *result;				\
    result = wrapper(a, NULL);			\
    if (result && result == Py_None) {		\
	Py_DECREF(result);			\
	result = NULL;				\
    }						\
    return result;				\
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *pyobj) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)pyobj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", pyobj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, val);
  Py_XINCREF(val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  _PyObject_GC_UNTRACK(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyTypeObject *type, PyObject *name, PyObject *value) {
  PyObject *attribute;
  descrsetfunc local_set;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,
#endif
      "swig_static_var_getset_descriptor",
      sizeof(PyGetSetDescrObject),
      0,
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                                   /* tp_alloc -> tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    staticvar_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
#endif
  }
  return &staticvar_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  int base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  int i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
    Py_INCREF((PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SwigPyObject swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t swig_types[2]
#define SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Interpolator_p_t swig_types[3]
#define SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Kameleon_p_t swig_types[4]
#define SWIGTYPE_p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t swig_types[5]
#define SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Tracer_p_t swig_types[6]
#define SWIGTYPE_p_ccmc__Attribute swig_types[7]
#define SWIGTYPE_p_ccmc__BATSRUS swig_types[8]
#define SWIGTYPE_p_ccmc__BATSRUSInterpolator swig_types[9]
#define SWIGTYPE_p_ccmc__CDFFileReader swig_types[10]
#define SWIGTYPE_p_ccmc__ENLIL swig_types[11]
#define SWIGTYPE_p_ccmc__ENLILInterpolator swig_types[12]
#define SWIGTYPE_p_ccmc__Fieldline swig_types[13]
#define SWIGTYPE_p_ccmc__FileReader swig_types[14]
#define SWIGTYPE_p_ccmc__GeneralFileReader swig_types[15]
#define SWIGTYPE_p_ccmc__Interpolator swig_types[16]
#define SWIGTYPE_p_ccmc__Kameleon swig_types[17]
#define SWIGTYPE_p_ccmc__KameleonInterpolator swig_types[18]
#define SWIGTYPE_p_ccmc__MAS swig_types[19]
#define SWIGTYPE_p_ccmc__MASInterpolator swig_types[20]
#define SWIGTYPE_p_ccmc__Model swig_types[21]
#define SWIGTYPE_p_ccmc__OpenGGCM swig_types[22]
#define SWIGTYPE_p_ccmc__OpenGGCMInterpolator swig_types[23]
#define SWIGTYPE_p_ccmc__Point3f swig_types[24]
#define SWIGTYPE_p_ccmc__Position swig_types[25]
#define SWIGTYPE_p_ccmc__SWMFIono swig_types[26]
#define SWIGTYPE_p_ccmc__SWMFIonoInterpolator swig_types[27]
#define SWIGTYPE_p_ccmc__Time swig_types[28]
#define SWIGTYPE_p_ccmc__Tracer swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_difference_type swig_types[31]
#define SWIGTYPE_p_float swig_types[32]
#define SWIGTYPE_p_int swig_types[33]
#define SWIGTYPE_p_long swig_types[34]
#define SWIGTYPE_p_p_PyObject swig_types[35]
#define SWIGTYPE_p_size_type swig_types[36]
#define SWIGTYPE_p_std__allocatorT_ccmc__Fieldline_t swig_types[37]
#define SWIGTYPE_p_std__allocatorT_ccmc__Point3f_t swig_types[38]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[39]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[40]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[41]
#define SWIGTYPE_p_std__invalid_argument swig_types[42]
#define SWIGTYPE_p_std__ostream swig_types[43]
#define SWIGTYPE_p_std__string swig_types[44]
#define SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t swig_types[45]
#define SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t swig_types[46]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[47]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[48]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[49]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[50]
#define SWIGTYPE_p_value_type swig_types[51]
static swig_type_info *swig_types[53];
static swig_module_info swig_module = {swig_types, 52, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _CCMC.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__CCMC

#else
#  define SWIG_init    init_CCMC

#endif
#define SWIG_name    "_CCMC"

#define SWIGVERSION 0x020009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <ccmc/FileReader.h>
#include <ccmc/GeneralFileReader.h>
#include <ccmc/CDFFileReader.h>
#include <ccmc/Kameleon.h>
#include <ccmc/Interpolator.h>
#include <ccmc/KameleonInterpolator.h>
#include <ccmc/Tracer.h>
#include <ccmc/Fieldline.h>
#include <ccmc/Point3f.h>
#include <ccmc/Attribute.h>
#include <ccmc/Model.h>
#include <ccmc/BATSRUS.h>
#include <ccmc/ENLIL.h>
#include <ccmc/MAS.h>
#include <ccmc/OpenGGCM.h>
#include <ccmc/SWMFIono.h>
#include <ccmc/BATSRUSInterpolator.h>
#include <ccmc/ENLILInterpolator.h>
#include <ccmc/MASInterpolator.h>
#include <ccmc/OpenGGCMInterpolator.h>
#include <ccmc/SWMFIonoInterpolator.h>
#include <ccmc/CCMCTime.h>
using namespace std;
using namespace ccmc;




SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            if (it==self->end())
              break;
            for (Py_ssize_t c=0; c<(step-1); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          self->erase((++it).base());
          if (it==self->rend())
            break;
          for (Py_ssize_t c=0; c<(-step-1); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}

SWIGINTERN swig::SwigPyIterator *vector_Sl_Point3f_Sg__iterator(vector< Point3f > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_Point3f_Sg____nonzero__(vector< Point3f > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_Point3f_Sg____bool__(vector< Point3f > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< ccmc::Point3f >::size_type vector_Sl_Point3f_Sg____len__(vector< Point3f > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN vector< ccmc::Point3f >::value_type vector_Sl_Point3f_Sg__pop(vector< Point3f > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *vector_Sl_Point3f_Sg____getslice__(vector< Point3f > *self,vector< ccmc::Point3f >::difference_type i,vector< ccmc::Point3f >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<ccmc::Point3f > {
      typedef pointer_category category;
      static const char* type_name() { return"ccmc::Point3f"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<ccmc::Point3f, std::allocator< ccmc::Point3f > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ccmc::Point3f" "," "std::allocator< ccmc::Point3f >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_Point3f_Sg____setslice____SWIG_0(vector< Point3f > *self,vector< ccmc::Point3f >::difference_type i,vector< ccmc::Point3f >::difference_type j,std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &v=std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_Point3f_Sg____delslice__(vector< Point3f > *self,vector< ccmc::Point3f >::difference_type i,vector< ccmc::Point3f >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_Point3f_Sg____delitem____SWIG_0(vector< Point3f > *self,vector< ccmc::Point3f >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *vector_Sl_Point3f_Sg____getitem____SWIG_0(vector< Point3f > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type id = i;
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Point3f_Sg____setitem____SWIG_0(vector< Point3f > *self,PySliceObject *slice,std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type id = i;
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_Point3f_Sg____setitem____SWIG_1(vector< Point3f > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type id = i;
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Point3f_Sg____delitem____SWIG_1(vector< Point3f > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type id = i;
      std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< ccmc::Point3f >::value_type const &vector_Sl_Point3f_Sg____getitem____SWIG_1(vector< Point3f > const *self,vector< ccmc::Point3f >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_Point3f_Sg____setitem____SWIG_2(vector< Point3f > *self,vector< ccmc::Point3f >::difference_type i,vector< ccmc::Point3f >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_Point3f_Sg__append(vector< Point3f > *self,vector< ccmc::Point3f >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_std_string_Sg__iterator(vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_std_string_Sg____nonzero__(vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_std_string_Sg____bool__(vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< std::string >::size_type vector_Sl_std_string_Sg____len__(vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN vector< std::string >::value_type vector_Sl_std_string_Sg__pop(vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *vector_Sl_std_string_Sg____getslice__(vector< std::string > *self,vector< std::string >::difference_type i,vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_std_string_Sg____setslice____SWIG_0(vector< std::string > *self,vector< std::string >::difference_type i,vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v=std::vector< std::string,std::allocator< std::string > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_std_string_Sg____delslice__(vector< std::string > *self,vector< std::string >::difference_type i,vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_std_string_Sg____delitem____SWIG_0(vector< std::string > *self,vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *vector_Sl_std_string_Sg____getitem____SWIG_0(vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector<std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_std_string_Sg____setitem____SWIG_0(vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector<std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_std_string_Sg____setitem____SWIG_1(vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector<std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_std_string_Sg____delitem____SWIG_1(vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector<std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< std::string >::value_type const &vector_Sl_std_string_Sg____getitem____SWIG_1(vector< std::string > const *self,vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_std_string_Sg____setitem____SWIG_2(vector< std::string > *self,vector< std::string >::difference_type i,vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_std_string_Sg__append(vector< std::string > *self,vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_float_Sg__iterator(vector< float > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_float_Sg____nonzero__(vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_float_Sg____bool__(vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< float >::size_type vector_Sl_float_Sg____len__(vector< float > const *self){
      return self->size();
    }
SWIGINTERN vector< float >::value_type vector_Sl_float_Sg__pop(vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< float,std::allocator< float > > *vector_Sl_float_Sg____getslice__(vector< float > *self,vector< float >::difference_type i,vector< float >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_float_Sg____setslice____SWIG_0(vector< float > *self,vector< float >::difference_type i,vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v=std::vector< float,std::allocator< float > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_float_Sg____delslice__(vector< float > *self,vector< float >::difference_type i,vector< float >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_float_Sg____delitem____SWIG_0(vector< float > *self,vector< float >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< float,std::allocator< float > > *vector_Sl_float_Sg____getitem____SWIG_0(vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<float,std::allocator< float > >::difference_type id = i;
      std::vector<float,std::allocator< float > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_float_Sg____setitem____SWIG_0(vector< float > *self,PySliceObject *slice,std::vector< float,std::allocator< float > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<float,std::allocator< float > >::difference_type id = i;
      std::vector<float,std::allocator< float > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_float_Sg____setitem____SWIG_1(vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<float,std::allocator< float > >::difference_type id = i;
      std::vector<float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_float_Sg____delitem____SWIG_1(vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<float,std::allocator< float > >::difference_type id = i;
      std::vector<float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< float >::value_type const &vector_Sl_float_Sg____getitem____SWIG_1(vector< float > const *self,vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_float_Sg____setitem____SWIG_2(vector< float > *self,vector< float >::difference_type i,vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_float_Sg__append(vector< float > *self,vector< float >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_Fieldline_Sg__iterator(vector< Fieldline > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_Fieldline_Sg____nonzero__(vector< Fieldline > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_Fieldline_Sg____bool__(vector< Fieldline > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< ccmc::Fieldline >::size_type vector_Sl_Fieldline_Sg____len__(vector< Fieldline > const *self){
      return self->size();
    }
SWIGINTERN vector< ccmc::Fieldline >::value_type vector_Sl_Fieldline_Sg__pop(vector< Fieldline > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *vector_Sl_Fieldline_Sg____getslice__(vector< Fieldline > *self,vector< ccmc::Fieldline >::difference_type i,vector< ccmc::Fieldline >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

  namespace swig {
    template <>  struct traits<ccmc::Fieldline > {
      typedef pointer_category category;
      static const char* type_name() { return"ccmc::Fieldline"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<ccmc::Fieldline, std::allocator< ccmc::Fieldline > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ccmc::Fieldline" "," "std::allocator< ccmc::Fieldline >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_Fieldline_Sg____setslice____SWIG_0(vector< Fieldline > *self,vector< ccmc::Fieldline >::difference_type i,vector< ccmc::Fieldline >::difference_type j,std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &v=std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____delslice__(vector< Fieldline > *self,vector< ccmc::Fieldline >::difference_type i,vector< ccmc::Fieldline >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____delitem____SWIG_0(vector< Fieldline > *self,vector< ccmc::Fieldline >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *vector_Sl_Fieldline_Sg____getitem____SWIG_0(vector< Fieldline > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type id = i;
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____setitem____SWIG_0(vector< Fieldline > *self,PySliceObject *slice,std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type id = i;
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____setitem____SWIG_1(vector< Fieldline > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type id = i;
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____delitem____SWIG_1(vector< Fieldline > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type id = i;
      std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< ccmc::Fieldline >::value_type const &vector_Sl_Fieldline_Sg____getitem____SWIG_1(vector< Fieldline > const *self,vector< ccmc::Fieldline >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_Fieldline_Sg____setitem____SWIG_2(vector< Fieldline > *self,vector< ccmc::Fieldline >::difference_type i,vector< ccmc::Fieldline >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_Fieldline_Sg__append(vector< Fieldline > *self,vector< ccmc::Fieldline >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN swig::SwigPyIterator *vector_Sl_int_Sg__iterator(vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool vector_Sl_int_Sg____nonzero__(vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool vector_Sl_int_Sg____bool__(vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN vector< int >::size_type vector_Sl_int_Sg____len__(vector< int > const *self){
      return self->size();
    }
SWIGINTERN vector< int >::value_type vector_Sl_int_Sg__pop(vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *vector_Sl_int_Sg____getslice__(vector< int > *self,vector< int >::difference_type i,vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN void vector_Sl_int_Sg____setslice____SWIG_0(vector< int > *self,vector< int >::difference_type i,vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void vector_Sl_int_Sg____delslice__(vector< int > *self,vector< int >::difference_type i,vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void vector_Sl_int_Sg____delitem____SWIG_0(vector< int > *self,vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *vector_Sl_int_Sg____getitem____SWIG_0(vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_int_Sg____setitem____SWIG_0(vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void vector_Sl_int_Sg____setitem____SWIG_1(vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void vector_Sl_int_Sg____delitem____SWIG_1(vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN vector< int >::value_type const &vector_Sl_int_Sg____getitem____SWIG_1(vector< int > const *self,vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void vector_Sl_int_Sg____setitem____SWIG_2(vector< int > *self,vector< int >::difference_type i,vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void vector_Sl_int_Sg__append(vector< int > *self,vector< int >::value_type const &x){
      self->push_back(x);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_distance",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_equal",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGPY_ITERNEXT_CLOSURE(_wrap_SwigPyIterator___next__)

SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_advance",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___eq__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___ne__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___iadd__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___iadd__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___isub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___isub__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___add__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___sub__)

SWIGINTERN PyObject *_wrap_FileReader_open__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_open",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_open" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_open" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (long)(arg1)->open((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_open__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_open" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_open(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileReader_open__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileReader_open__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileReader_open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::FileReader::open(std::string const &,bool)\n"
    "    ccmc::FileReader::open(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariable__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariable" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariable__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariable" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariable__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariable" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariable__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariable" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileReader_getVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileReader_getVariable__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileReader_getVariable__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FileReader_getVariable__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileReader_getVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::FileReader::getVariable(std::string const &)\n"
    "    ccmc::FileReader::getVariable(long)\n"
    "    ccmc::FileReader::getVariable(std::string const &,long,long)\n"
    "    ccmc::FileReader::getVariable(long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAtIndex__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAtIndex__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getVariableAtIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAtIndex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileReader_getVariableAtIndex__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileReader_getVariableAtIndex__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileReader_getVariableAtIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::FileReader::getVariableAtIndex(std::string const &,long)\n"
    "    ccmc::FileReader::getVariableAtIndex(long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariableInt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableInt" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getVariableInt((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableIntAtIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_getVariableIntAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableIntAtIndex" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_getVariableIntAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfGlobalAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getNumberOfGlobalAttributes" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getNumberOfVariables" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariables();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfVariableAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getNumberOfVariableAttributes" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariableAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfRecords__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfRecords__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getNumberOfRecords" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->getNumberOfRecords(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getNumberOfRecords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileReader_getNumberOfRecords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileReader_getNumberOfRecords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileReader_getNumberOfRecords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::FileReader::getNumberOfRecords(std::string const &)\n"
    "    ccmc::FileReader::getNumberOfRecords(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariableID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableID" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariableName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableName" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getVariableName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getGlobalAttribute__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getGlobalAttribute" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttribute(arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getGlobalAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getGlobalAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getGlobalAttributeName" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getGlobalAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getVariableAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableAttributeName" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileReader_getVariableAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getGlobalAttribute__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getGlobalAttribute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FileReader_getGlobalAttribute__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__FileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileReader_getGlobalAttribute__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileReader_getGlobalAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::FileReader::getGlobalAttribute(long)\n"
    "    ccmc::FileReader::getGlobalAttribute(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileReader_getGlobalAttributeID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_getGlobalAttributeID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getGlobalAttributeID" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getGlobalAttributeID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getGlobalAttributeID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getGlobalAttributeID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAttribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_getVariableAttribute",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableAttribute" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getVariableAttributeNames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getVariableAttributeNames" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (arg1)->getVariableAttributeNames();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_doesAttributeExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_doesAttributeExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_doesAttributeExist" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_doesVariableExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileReader_doesVariableExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_doesVariableExist" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_close(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_close" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (long)(arg1)->close();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_getCurrentFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_getCurrentFilename" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (std::string *) &(arg1)->getCurrentFilename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_initializeVariableIDs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_initializeVariableIDs" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  (arg1)->initializeVariableIDs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_initializeVariableNames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_initializeVariableNames" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  (arg1)->initializeVariableNames();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_closeFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_closeFile" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  result = (long)(arg1)->closeFile();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileReader_openFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileReader_openFile",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileReader_openFile" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileReader_openFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileReader_openFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileReader_openFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (long)(arg1)->openFile((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileReader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::FileReader *arg1 = (ccmc::FileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__FileReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileReader" "', argument " "1"" of type '" "ccmc::FileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::FileReader * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_GeneralFileReader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::GeneralFileReader *)new ccmc::GeneralFileReader();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__GeneralFileReader, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_open" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariable__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariable" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariable__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariable" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariable__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GeneralFileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariable" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeneralFileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GeneralFileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariable__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GeneralFileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariable" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeneralFileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GeneralFileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GeneralFileReader_getVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeneralFileReader_getVariable__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GeneralFileReader_getVariable__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GeneralFileReader_getVariable__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GeneralFileReader_getVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::GeneralFileReader::getVariable(std::string const &)\n"
    "    ccmc::GeneralFileReader::getVariable(long)\n"
    "    ccmc::GeneralFileReader::getVariable(std::string const &,long,long)\n"
    "    ccmc::GeneralFileReader::getVariable(long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAtIndex__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeneralFileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAtIndex__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeneralFileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeneralFileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAtIndex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GeneralFileReader_getVariableAtIndex__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GeneralFileReader_getVariableAtIndex__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GeneralFileReader_getVariableAtIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::GeneralFileReader::getVariableAtIndex(std::string const &,long)\n"
    "    ccmc::GeneralFileReader::getVariableAtIndex(long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariableInt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableInt" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getVariableInt((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableIntAtIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeneralFileReader_getVariableIntAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableIntAtIndex" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeneralFileReader_getVariableIntAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfGlobalAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getNumberOfGlobalAttributes" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getNumberOfVariables" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariables();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfVariableAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getNumberOfVariableAttributes" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariableAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfRecords__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfRecords__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getNumberOfRecords" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->getNumberOfRecords(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getNumberOfRecords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GeneralFileReader_getNumberOfRecords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeneralFileReader_getNumberOfRecords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GeneralFileReader_getNumberOfRecords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::GeneralFileReader::getNumberOfRecords(std::string const &)\n"
    "    ccmc::GeneralFileReader::getNumberOfRecords(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariableID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableID" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariableName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableName" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getVariableName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getGlobalAttribute__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getGlobalAttribute" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttribute(arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getGlobalAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getGlobalAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getGlobalAttributeName" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getGlobalAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getVariableAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableAttributeName" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralFileReader_getVariableAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getGlobalAttribute__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getGlobalAttribute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GeneralFileReader_getGlobalAttribute__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__GeneralFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GeneralFileReader_getGlobalAttribute__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GeneralFileReader_getGlobalAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::GeneralFileReader::getGlobalAttribute(long)\n"
    "    ccmc::GeneralFileReader::getGlobalAttribute(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAttribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeneralFileReader_getVariableAttribute",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableAttribute" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeneralFileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getVariableAttributeNames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getVariableAttributeNames" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (arg1)->getVariableAttributeNames();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_doesAttributeExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_doesAttributeExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_doesAttributeExist" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_doesVariableExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeneralFileReader_doesVariableExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_doesVariableExist" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeneralFileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralFileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_close(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_close" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (long)(arg1)->close();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralFileReader_getCurrentFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralFileReader_getCurrentFilename" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  result = (std::string *) &(arg1)->getCurrentFilename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeneralFileReader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::GeneralFileReader *arg1 = (ccmc::GeneralFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__GeneralFileReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeneralFileReader" "', argument " "1"" of type '" "ccmc::GeneralFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::GeneralFileReader * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_CDFFileReader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::CDFFileReader *)new ccmc::CDFFileReader();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__CDFFileReader, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariable__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariable" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariable__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariable" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariable__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CDFFileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariable" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CDFFileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CDFFileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariable__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CDFFileReader_getVariable",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariable" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getVariable" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CDFFileReader_getVariable" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CDFFileReader_getVariable" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CDFFileReader_getVariable__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CDFFileReader_getVariable__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CDFFileReader_getVariable__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CDFFileReader_getVariable__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_getVariable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::getVariable(std::string const &)\n"
    "    ccmc::CDFFileReader::getVariable(long)\n"
    "    ccmc::CDFFileReader::getVariable(std::string const &,long,long)\n"
    "    ccmc::CDFFileReader::getVariable(long,long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAtIndex__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CDFFileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAtIndex__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CDFFileReader_getVariableAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CDFFileReader_getVariableAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (float)(arg1)->getVariableAtIndex(arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAtIndex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CDFFileReader_getVariableAtIndex__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CDFFileReader_getVariableAtIndex__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_getVariableAtIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::getVariableAtIndex(std::string const &,long)\n"
    "    ccmc::CDFFileReader::getVariableAtIndex(long,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariableInt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableInt" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getVariableInt((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableIntAtIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CDFFileReader_getVariableIntAtIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableIntAtIndex" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableIntAtIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CDFFileReader_getVariableIntAtIndex" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = (int)(arg1)->getVariableIntAtIndex((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfGlobalAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getNumberOfGlobalAttributes" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getNumberOfVariables" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariables();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfVariableAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getNumberOfVariableAttributes" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  result = (int)(arg1)->getNumberOfVariableAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfRecords__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getNumberOfRecords" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getNumberOfRecords((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfRecords__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getNumberOfRecords",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getNumberOfRecords" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getNumberOfRecords" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->getNumberOfRecords(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getNumberOfRecords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CDFFileReader_getNumberOfRecords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CDFFileReader_getNumberOfRecords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_getNumberOfRecords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::getNumberOfRecords(std::string const &)\n"
    "    ccmc::CDFFileReader::getNumberOfRecords(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariableID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableID" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariableName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableName" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getVariableName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getGlobalAttribute__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getGlobalAttribute" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttribute(arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getGlobalAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getGlobalAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getGlobalAttributeName" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getGlobalAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getVariableAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableAttributeName" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_getVariableAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getGlobalAttribute__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getGlobalAttribute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CDFFileReader_getGlobalAttribute__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CDFFileReader_getGlobalAttribute__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_getGlobalAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::getGlobalAttribute(long)\n"
    "    ccmc::CDFFileReader::getGlobalAttribute(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getGlobalAttributeID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_getGlobalAttributeID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getGlobalAttributeID" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getGlobalAttributeID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getGlobalAttributeID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getGlobalAttributeID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAttribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CDFFileReader_getVariableAttribute",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableAttribute" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CDFFileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getVariableAttributeNames(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getVariableAttributeNames" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  result = (arg1)->getVariableAttributeNames();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesAttributeExist__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_doesAttributeExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_doesAttributeExist" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesVariableExist__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_doesVariableExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_doesVariableExist" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CDFFileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDFFileReader_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesAttributeExist__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_doesAttributeExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_doesAttributeExist" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_doesAttributeExist" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)(arg1)->doesAttributeExist(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesAttributeExist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CDFFileReader_doesAttributeExist__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CDFFileReader_doesAttributeExist__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_doesAttributeExist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::doesAttributeExist(std::string const &)\n"
    "    ccmc::CDFFileReader::doesAttributeExist(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesVariableExist__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDFFileReader_doesVariableExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_doesVariableExist" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CDFFileReader_doesVariableExist" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)(arg1)->doesVariableExist(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_doesVariableExist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CDFFileReader_doesVariableExist__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__CDFFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CDFFileReader_doesVariableExist__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CDFFileReader_doesVariableExist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::CDFFileReader::doesVariableExist(std::string const &)\n"
    "    ccmc::CDFFileReader::doesVariableExist(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CDFFileReader_getCurrentFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDFFileReader_getCurrentFilename" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  result = (std::string *) &(arg1)->getCurrentFilename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CDFFileReader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::CDFFileReader *arg1 = (ccmc::CDFFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__CDFFileReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CDFFileReader" "', argument " "1"" of type '" "ccmc::CDFFileReader *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::CDFFileReader * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parseEPOCH3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  char temp1[24+1] ;
  int res1 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parseEPOCH3",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharArray(obj0, temp1, 24+1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseEPOCH3" "', argument " "1"" of type '" "char [24+1]""'");
  }
  arg1 = reinterpret_cast< char * >(temp1);
  result = (double)ccmc::parseEPOCH3(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encodeEPOCH3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  char temp2[24+1] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:encodeEPOCH3",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "encodeEPOCH3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharArray(obj1, temp2, 24+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encodeEPOCH3" "', argument " "2"" of type '" "char [24+1]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  ccmc::encodeEPOCH3(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EPOCHbreakdown(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  long *arg2 = (long *) 0 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  long *arg6 = (long *) 0 ;
  long *arg7 = (long *) 0 ;
  long *arg8 = (long *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:EPOCHbreakdown",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EPOCHbreakdown" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EPOCHbreakdown" "', argument " "2"" of type '" "long *""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EPOCHbreakdown" "', argument " "3"" of type '" "long *""'"); 
  }
  arg3 = reinterpret_cast< long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EPOCHbreakdown" "', argument " "4"" of type '" "long *""'"); 
  }
  arg4 = reinterpret_cast< long * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EPOCHbreakdown" "', argument " "5"" of type '" "long *""'"); 
  }
  arg5 = reinterpret_cast< long * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "EPOCHbreakdown" "', argument " "6"" of type '" "long *""'"); 
  }
  arg6 = reinterpret_cast< long * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EPOCHbreakdown" "', argument " "7"" of type '" "long *""'"); 
  }
  arg7 = reinterpret_cast< long * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "EPOCHbreakdown" "', argument " "8"" of type '" "long *""'"); 
  }
  arg8 = reinterpret_cast< long * >(argp8);
  ccmc::EPOCHbreakdown(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c0_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_c0_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c0_set" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position_c0_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->c0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c0_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c0_get" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  result = (float) ((arg1)->c0);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_c1_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c1_set" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position_c1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->c1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c1_get" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  result = (float) ((arg1)->c1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Position_c2_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c2_set" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position_c2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->c2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Position_c2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_c2_get" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  result = (float) ((arg1)->c2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Position(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Position *)new ccmc::Position();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Position, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Position(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Position *arg1 = (ccmc::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "ccmc::Position *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Position * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Kameleon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Kameleon *)new ccmc::Kameleon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Kameleon, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Kameleon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Kameleon" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_close(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_close" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (long)(arg1)->close();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_createNewInterpolator" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_doesAttributeExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_doesAttributeExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_doesAttributeExist" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_doesAttributeExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesAttributeExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_doesVariableExist(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_doesVariableExist",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_doesVariableExist" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_doesVariableExist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->doesVariableExist((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getConversionFactorToSI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getConversionFactorToSI",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getConversionFactorToSI" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getConversionFactorToSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getConversionFactorToSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (float)(arg1)->getConversionFactorToSI((std::string const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getCurrentFilename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getCurrentFilename" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (std::string *) &(arg1)->getCurrentFilename();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getCurrentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Time result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getCurrentTime" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (arg1)->getCurrentTime();
  resultobj = SWIG_NewPointerObj((new Time(static_cast< const Time& >(result))), SWIGTYPE_p_ccmc__Time, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getGlobalAttribute__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon_getGlobalAttribute" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttribute(arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getGlobalAttribute__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getGlobalAttribute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getGlobalAttribute" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getGlobalAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getGlobalAttribute((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getGlobalAttribute(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Kameleon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Kameleon_getGlobalAttribute__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Kameleon, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Kameleon_getGlobalAttribute__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Kameleon_getGlobalAttribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Kameleon::getGlobalAttribute(long)\n"
    "    ccmc::Kameleon::getGlobalAttribute(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Kameleon_getGlobalAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getGlobalAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getGlobalAttributeName" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon_getGlobalAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getGlobalAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getLoadedVariables" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getMissingValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getMissingValue" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (float)(arg1)->getMissingValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getModelName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getModelName" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (std::string *) &(arg1)->getModelName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getNativeUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getNativeUnit",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getNativeUnit" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getNativeUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getNativeUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getNativeUnit((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getNumberOfGlobalAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getNumberOfGlobalAttributes" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (int)(arg1)->getNumberOfGlobalAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getNumberOfVariableAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getNumberOfVariableAttributes" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (int)(arg1)->getNumberOfVariableAttributes();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getNumberOfVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getNumberOfVariables" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (int)(arg1)->getNumberOfVariables();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getSIUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getSIUnit",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getSIUnit" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getSIUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getSIUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getSIUnit((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariable" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariable((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableAttribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Attribute result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Kameleon_getVariableAttribute",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableAttribute" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Kameleon_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getVariableAttribute((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Attribute(static_cast< const Attribute& >(result))), SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableAttributeName" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon_getVariableAttributeName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableAttributeName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableFromMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableFromMap" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariableFromMap((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableID" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->getVariableID((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableInt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableInt" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getVariableInt((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableIntFromMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableIntFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableIntFromMap" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVariableIntFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVariableIntFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getVariableIntFromMap((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVariableName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVariableName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVariableName" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon_getVariableName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getVariableName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getVisUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_getVisUnit",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getVisUnit" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_getVisUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_getVisUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getVisUnit((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_loadVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_loadVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_loadVariable" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_loadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_loadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadVariable((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_loadVectorVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_loadVectorVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_loadVectorVariable" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_loadVectorVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_loadVectorVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadVectorVariable((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_open" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_setMissingValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_setMissingValue",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_setMissingValue" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon_setMissingValue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setMissingValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_unloadVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_unloadVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_unloadVariable" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_unloadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_unloadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->unloadVariable((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_unloadVectorVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon_unloadVectorVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_unloadVectorVariable" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon_unloadVectorVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Kameleon_unloadVectorVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->unloadVectorVariable((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon_getProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon_getProgress" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (int)(arg1)->getProgress();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon__cxform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  ccmc::Position *arg4 = (ccmc::Position *) 0 ;
  ccmc::Position *arg5 = (ccmc::Position *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Kameleon__cxform",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kameleon__cxform" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Kameleon__cxform" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Kameleon__cxform" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Kameleon__cxform" "', argument " "4"" of type '" "ccmc::Position *""'"); 
  }
  arg4 = reinterpret_cast< ccmc::Position * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ccmc__Position, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Kameleon__cxform" "', argument " "5"" of type '" "ccmc::Position *""'"); 
  }
  arg5 = reinterpret_cast< ccmc::Position * >(argp5);
  result = (int)ccmc::Kameleon::_cxform((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon__cxRound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Kameleon__cxRound",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Kameleon__cxRound" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (long)ccmc::Kameleon::_cxRound(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon__date2es(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Kameleon__date2es",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Kameleon__date2es" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon__date2es" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Kameleon__date2es" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Kameleon__date2es" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Kameleon__date2es" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Kameleon__date2es" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (long)ccmc::Kameleon::_date2es(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kameleon__gregorian_calendar_to_jd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Kameleon__gregorian_calendar_to_jd",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Kameleon__gregorian_calendar_to_jd" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (double)ccmc::Kameleon::_gregorian_calendar_to_jd(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_kameleonObjects_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Kameleon_p_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ccmc::kameleonObjects""' of type '""boost::unordered_map< int,ccmc::Kameleon * >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ccmc::kameleonObjects""' of type '""boost::unordered_map< int,ccmc::Kameleon * >""'");
    } else {
      boost::unordered_map< int,ccmc::Kameleon * > * temp;
      temp  = reinterpret_cast< boost::unordered_map< int,ccmc::Kameleon * > * >(argp);
      ccmc::kameleonObjects = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_kameleonObjects_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ccmc::kameleonObjects), SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Kameleon_p_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_tracerObjects_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Tracer_p_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ccmc::tracerObjects""' of type '""boost::unordered_map< int,ccmc::Tracer * >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ccmc::tracerObjects""' of type '""boost::unordered_map< int,ccmc::Tracer * >""'");
    } else {
      boost::unordered_map< int,ccmc::Tracer * > * temp;
      temp  = reinterpret_cast< boost::unordered_map< int,ccmc::Tracer * > * >(argp);
      ccmc::tracerObjects = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_tracerObjects_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ccmc::tracerObjects), SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Tracer_p_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_interpolatorObjects_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Interpolator_p_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ccmc::interpolatorObjects""' of type '""boost::unordered_map< int,ccmc::Interpolator * >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ccmc::interpolatorObjects""' of type '""boost::unordered_map< int,ccmc::Interpolator * >""'");
    } else {
      boost::unordered_map< int,ccmc::Interpolator * > * temp;
      temp  = reinterpret_cast< boost::unordered_map< int,ccmc::Interpolator * > * >(argp);
      ccmc::interpolatorObjects = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolatorObjects_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ccmc::interpolatorObjects), SWIGTYPE_p_boost__unordered_mapT_int_ccmc__Interpolator_p_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_generalFileReaderObjects_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ccmc::generalFileReaderObjects""' of type '""boost::unordered_map< int,ccmc::GeneralFileReader * >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ccmc::generalFileReaderObjects""' of type '""boost::unordered_map< int,ccmc::GeneralFileReader * >""'");
    } else {
      boost::unordered_map< int,ccmc::GeneralFileReader * > * temp;
      temp  = reinterpret_cast< boost::unordered_map< int,ccmc::GeneralFileReader * > * >(argp);
      ccmc::generalFileReaderObjects = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_generalFileReaderObjects_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ccmc::generalFileReaderObjects), SWIGTYPE_p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_timeInterpolatorObjects_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""ccmc::timeInterpolatorObjects""' of type '""boost::unordered_map< int,ccmc::TimeInterpolator * >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ccmc::timeInterpolatorObjects""' of type '""boost::unordered_map< int,ccmc::TimeInterpolator * >""'");
    } else {
      boost::unordered_map< int,ccmc::TimeInterpolator * > * temp;
      temp  = reinterpret_cast< boost::unordered_map< int,ccmc::TimeInterpolator * > * >(argp);
      ccmc::timeInterpolatorObjects = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_timeInterpolatorObjects_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&ccmc::timeInterpolatorObjects), SWIGTYPE_p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Interpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Interpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_interpolate" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Interpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Interpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Interpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Interpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_interpolate" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Interpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Interpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Interpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Interpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Interpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Interpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Interpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_interpolate" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Interpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Interpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Interpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Interpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_interpolate" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Interpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Interpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Interpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Interpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Interpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Interpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Interpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Interpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Interpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_Interpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Interpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Interpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::Interpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::Interpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::Interpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Interpolator_getConversionFactor__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Interpolator_getConversionFactor",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_getConversionFactor" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interpolator_getConversionFactor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interpolator_getConversionFactor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (float)(arg1)->getConversionFactor((std::string const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_getConversionFactor__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Interpolator_getConversionFactor",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_getConversionFactor" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interpolator_getConversionFactor" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (float)(arg1)->getConversionFactor((long const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolator_getConversionFactor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Interpolator_getConversionFactor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Interpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Interpolator_getConversionFactor__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Interpolator_getConversionFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Interpolator::getConversionFactor(std::string const &)\n"
    "    ccmc::Interpolator::getConversionFactor(long const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Interpolator_getModelName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolator_getModelName" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  result = (arg1)->getModelName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Interpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Interpolator *arg1 = (ccmc::Interpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Interpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Interpolator" "', argument " "1"" of type '" "ccmc::Interpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Interpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_KameleonInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::KameleonInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KameleonInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KameleonInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::KameleonInterpolator *)new ccmc::KameleonInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__KameleonInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_KameleonInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KameleonInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__KameleonInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KameleonInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::KameleonInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::KameleonInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KameleonInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KameleonInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KameleonInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KameleonInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:KameleonInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__KameleonInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KameleonInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::KameleonInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::KameleonInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KameleonInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KameleonInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KameleonInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KameleonInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "KameleonInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "KameleonInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KameleonInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KameleonInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__KameleonInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KameleonInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::KameleonInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::KameleonInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KameleonInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KameleonInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KameleonInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KameleonInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:KameleonInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__KameleonInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KameleonInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::KameleonInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::KameleonInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KameleonInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KameleonInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KameleonInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KameleonInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KameleonInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "KameleonInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "KameleonInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KameleonInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KameleonInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__KameleonInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_KameleonInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__KameleonInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_KameleonInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__KameleonInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_KameleonInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__KameleonInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_KameleonInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KameleonInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::KameleonInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::KameleonInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::KameleonInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::KameleonInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KameleonInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::KameleonInterpolator *arg1 = (ccmc::KameleonInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__KameleonInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KameleonInterpolator" "', argument " "1"" of type '" "ccmc::KameleonInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::KameleonInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Tracer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Kameleon *arg1 = (ccmc::Kameleon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Tracer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Tracer",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Kameleon, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tracer" "', argument " "1"" of type '" "ccmc::Kameleon *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Kameleon * >(argp1);
  result = (ccmc::Tracer *)new ccmc::Tracer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Tracer, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Tracer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tracer" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setInnerBoundary(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setInnerBoundary",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setInnerBoundary" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setInnerBoundary" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setInnerBoundary(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setMaxIterations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setMaxIterations",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setMaxIterations" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setMaxIterations" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setMaxIterations(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setDn(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setDn",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setDn" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setDn" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setDn(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setTilt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setTilt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setTilt" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setTilt" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setTilt(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setMissing(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setMissing",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setMissing" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setMissing" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setMissing(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setMaxArcLength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setMaxArcLength",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setMaxArcLength" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setMaxArcLength" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setMaxArcLength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_bidirectionalTrace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Tracer_bidirectionalTrace",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_bidirectionalTrace" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_bidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_bidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_bidirectionalTrace" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_bidirectionalTrace" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_bidirectionalTrace" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (arg1)->bidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_bidirectionalTraceWithDipole(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Tracer_bidirectionalTraceWithDipole",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_bidirectionalTraceWithDipole" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (arg1)->bidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTrace__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  ccmc::Tracer::Direction *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 ;
  ccmc::Tracer::Direction temp6 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Tracer_unidirectionalTrace",&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_unidirectionalTrace" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_unidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_unidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_unidirectionalTrace" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_unidirectionalTrace" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_unidirectionalTrace" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_int (obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Tracer_unidirectionalTrace" "', argument " "6"" of type '" "ccmc::Tracer::Direction const &""'");
  } else {
    temp6 = static_cast< ccmc::Tracer::Direction >(val6);
    arg6 = &temp6;
  }
  result = (arg1)->unidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(ccmc::Tracer::Direction const &)*arg6);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTrace__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Tracer_unidirectionalTrace",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_unidirectionalTrace" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_unidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_unidirectionalTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_unidirectionalTrace" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_unidirectionalTrace" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_unidirectionalTrace" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (arg1)->unidirectionalTrace((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTrace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Tracer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Tracer_unidirectionalTrace__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Tracer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Tracer_unidirectionalTrace__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tracer_unidirectionalTrace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Tracer::unidirectionalTrace(std::string const &,float const &,float const &,float const &,ccmc::Tracer::Direction const &)\n"
    "    ccmc::Tracer::unidirectionalTrace(std::string const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTraceWithDipole__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  ccmc::Tracer::Direction *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 ;
  ccmc::Tracer::Direction temp6 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Tracer_unidirectionalTraceWithDipole",&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_int (obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "6"" of type '" "ccmc::Tracer::Direction const &""'");
  } else {
    temp6 = static_cast< ccmc::Tracer::Direction >(val6);
    arg6 = &temp6;
  }
  result = (arg1)->unidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(ccmc::Tracer::Direction const &)*arg6);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTraceWithDipole__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Tracer_unidirectionalTraceWithDipole",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Tracer_unidirectionalTraceWithDipole" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (arg1)->unidirectionalTraceWithDipole((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_unidirectionalTraceWithDipole(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Tracer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Tracer_unidirectionalTraceWithDipole__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Tracer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Tracer_unidirectionalTraceWithDipole__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Tracer_unidirectionalTraceWithDipole'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Tracer::unidirectionalTraceWithDipole(std::string const &,float const &,float const &,float const &,ccmc::Tracer::Direction const &)\n"
    "    ccmc::Tracer::unidirectionalTraceWithDipole(std::string const &,float const &,float const &,float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Tracer_findLastClosed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Point3f arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tracer_findLastClosed",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_findLastClosed" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_findLastClosed" "', argument " "2"" of type '" "Point3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_findLastClosed" "', argument " "2"" of type '" "Point3f""'");
    } else {
      Point3f * temp = reinterpret_cast< Point3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_findLastClosed" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->findLastClosed(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Fieldline(static_cast< const Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_getLastClosedFieldlines(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tracer_getLastClosedFieldlines",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_getLastClosedFieldlines" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_getLastClosedFieldlines" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tracer_getLastClosedFieldlines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Tracer_getLastClosedFieldlines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->getLastClosedFieldlines(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::vector< Fieldline,std::allocator< ccmc::Fieldline > >(static_cast< const std::vector< Fieldline,std::allocator< ccmc::Fieldline > >& >(result))), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_isClosed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Fieldline *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_isClosed",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_isClosed" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Fieldline,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_isClosed" "', argument " "2"" of type '" "Fieldline &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_isClosed" "', argument " "2"" of type '" "Fieldline &""'"); 
  }
  arg2 = reinterpret_cast< Fieldline * >(argp2);
  result = (bool)(arg1)->isClosed(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setUseMaxArcLength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setUseMaxArcLength",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setUseMaxArcLength" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setUseMaxArcLength" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setUseMaxArcLength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_getVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  std::string *arg2 = 0 ;
  Point3f *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  ccmc::Interpolator *arg7 = (ccmc::Interpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Point3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Tracer_getVector",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_getVector" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_getVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_getVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tracer_getVector" "', argument " "3"" of type '" "Point3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_getVector" "', argument " "3"" of type '" "Point3f const &""'"); 
  }
  arg3 = reinterpret_cast< Point3f * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Tracer_getVector" "', argument " "4"" of type '" "float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_getVector" "', argument " "4"" of type '" "float &""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Tracer_getVector" "', argument " "5"" of type '" "float &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_getVector" "', argument " "5"" of type '" "float &""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Tracer_getVector" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_getVector" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Tracer_getVector" "', argument " "7"" of type '" "ccmc::Interpolator const *""'"); 
  }
  arg7 = reinterpret_cast< ccmc::Interpolator * >(argp7);
  result = (arg1)->getVector((std::string const &)*arg2,(Point3f const &)*arg3,*arg4,*arg5,*arg6,(ccmc::Interpolator const *)arg7);
  resultobj = SWIG_NewPointerObj((new Point3f(static_cast< const Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setRegionOfInterest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  Point3f arg2 ;
  Point3f arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tracer_setRegionOfInterest",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setRegionOfInterest" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tracer_setRegionOfInterest" "', argument " "2"" of type '" "Point3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_setRegionOfInterest" "', argument " "2"" of type '" "Point3f""'");
    } else {
      Point3f * temp = reinterpret_cast< Point3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tracer_setRegionOfInterest" "', argument " "3"" of type '" "Point3f""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tracer_setRegionOfInterest" "', argument " "3"" of type '" "Point3f""'");
    } else {
      Point3f * temp = reinterpret_cast< Point3f * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->setRegionOfInterest(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tracer_setUseRegionOfInterest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Tracer *arg1 = (ccmc::Tracer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tracer_setUseRegionOfInterest",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Tracer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tracer_setUseRegionOfInterest" "', argument " "1"" of type '" "ccmc::Tracer *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Tracer * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tracer_setUseRegionOfInterest" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setUseRegionOfInterest(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Fieldline__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Fieldline *)new ccmc::Fieldline();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Fieldline, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Fieldline__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Fieldline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Fieldline",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Fieldline" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (ccmc::Fieldline *)new ccmc::Fieldline(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Fieldline, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Fieldline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Fieldline__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Fieldline__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Fieldline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Fieldline::Fieldline()\n"
    "    ccmc::Fieldline::Fieldline(int)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Fieldline(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Fieldline" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_insertPointData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  Point3f *arg2 = 0 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Fieldline_insertPointData",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_insertPointData" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fieldline_insertPointData" "', argument " "2"" of type '" "Point3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fieldline_insertPointData" "', argument " "2"" of type '" "Point3f const &""'"); 
  }
  arg2 = reinterpret_cast< Point3f * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Fieldline_insertPointData" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  (arg1)->insertPointData((Point3f const &)*arg2,(float const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_removePoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_removePoint",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_removePoint" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_removePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->removePoint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_reverseOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Fieldline result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_reverseOrder" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (arg1)->reverseOrder();
  resultobj = SWIG_NewPointerObj((new ccmc::Fieldline(static_cast< const ccmc::Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_reverseOrderInPlace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_reverseOrderInPlace" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  (arg1)->reverseOrderInPlace();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getPositions(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Point3f,std::allocator< ccmc::Point3f > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getPositions" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< Point3f,std::allocator< ccmc::Point3f > > *) &(arg1)->getPositions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getData__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getData" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_size" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (int)(arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_getPosition",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getPosition" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_getPosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Point3f *) &(arg1)->getPosition(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getData__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_getData",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getData" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_getData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->getData(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Fieldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Fieldline_getData__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Fieldline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Fieldline_getData__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Fieldline_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Fieldline::getData()\n"
    "    ccmc::Fieldline::getData(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Fieldline_getStartPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Point3f result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getStartPoint" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (arg1)->getStartPoint();
  resultobj = SWIG_NewPointerObj((new Point3f(static_cast< const Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_reserve" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_reserve" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_setStartPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  Point3f arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_setStartPoint",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_setStartPoint" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fieldline_setStartPoint" "', argument " "2"" of type '" "Point3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Fieldline_setStartPoint" "', argument " "2"" of type '" "Point3f""'");
    } else {
      Point3f * temp = reinterpret_cast< Point3f * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->setStartPoint(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_setVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_setVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_setVariable" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Fieldline_setVariable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setVariable(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getVariable" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::string *) &(arg1)->getVariable();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getDs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getDs" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->getDs();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Point3f,std::allocator< ccmc::Point3f > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getElements" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< Point3f,std::allocator< ccmc::Point3f > > *) &(arg1)->getElements();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_getElement",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getElement" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_getElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Point3f *) &(arg1)->getElement(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_integrate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_integrate" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->integrate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_derivative(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_derivative" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->derivative();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_measure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_measure" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->measure();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getLength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_getLength",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getLength" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_getLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->getLength(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getIntegral(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_getIntegral",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getIntegral" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_getIntegral" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (float)(arg1)->getIntegral(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_interpolate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ccmc::Fieldline result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Fieldline_interpolate",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_interpolate" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_interpolate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Fieldline_interpolate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->interpolate(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new ccmc::Fieldline(static_cast< const ccmc::Fieldline& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getNearest(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getNearest" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< int,std::allocator< int > > *) &(arg1)->getNearest();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_getTlocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_getTlocal" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< float,std::allocator< float > > *) &(arg1)->getTlocal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_minmax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_minmax" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  (arg1)->minmax();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_mincount_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_mincount_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_mincount_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_mincount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->mincount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_mincount_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_mincount_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (int) ((arg1)->mincount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_maxcount_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_maxcount_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_maxcount_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_maxcount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxcount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_maxcount_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_maxcount_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (int) ((arg1)->maxcount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_minima_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_minima_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_minima_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fieldline_minima_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->minima = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_minima_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_minima_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->minima);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_maxima_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_maxima_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_maxima_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Fieldline_maxima_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->maxima = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_maxima_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_maxima_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->maxima);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_GlobMinIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_GlobMinIndex_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_GlobMinIndex_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_GlobMinIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->GlobMinIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_GlobMinIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_GlobMinIndex_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (int) ((arg1)->GlobMinIndex);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_GlobMaxIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fieldline_GlobMaxIndex_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_GlobMaxIndex_set" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Fieldline_GlobMaxIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->GlobMaxIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fieldline_GlobMaxIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Fieldline *arg1 = (ccmc::Fieldline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fieldline_GlobMaxIndex_get" "', argument " "1"" of type '" "ccmc::Fieldline *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Fieldline * >(argp1);
  result = (int) ((arg1)->GlobMaxIndex);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Point3f__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ccmc::Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Point3f",&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point3f" "', argument " "1"" of type '" "float""'");
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point3f" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Point3f" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  result = (ccmc::Point3f *)new ccmc::Point3f((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Point3f__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  ccmc::Point3f::Coordinates arg4 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ccmc::Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Point3f",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point3f" "', argument " "1"" of type '" "float""'");
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point3f" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Point3f" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_int(obj4, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Point3f" "', argument " "4"" of type '" "ccmc::Point3f::Coordinates""'");
  } 
  arg4 = static_cast< ccmc::Point3f::Coordinates >(val4);
  result = (ccmc::Point3f *)new ccmc::Point3f((float const &)*arg1,(float const &)*arg2,(float const &)*arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Point3f__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Point3f",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Point3f" "', argument " "1"" of type '" "ccmc::Point3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Point3f" "', argument " "1"" of type '" "ccmc::Point3f const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (ccmc::Point3f *)new ccmc::Point3f((ccmc::Point3f const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Point3f__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Point3f *)new ccmc::Point3f();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Point3f__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f::Coordinates arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Point3f",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point3f" "', argument " "1"" of type '" "ccmc::Point3f::Coordinates""'");
  } 
  arg1 = static_cast< ccmc::Point3f::Coordinates >(val1);
  result = (ccmc::Point3f *)new ccmc::Point3f(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Point3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Point3f__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ccmc__Point3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Point3f__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Point3f__SWIG_4(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Point3f__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Point3f__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Point3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Point3f::Point3f(float const &,float const &,float const &)\n"
    "    ccmc::Point3f::Point3f(float const &,float const &,float const &,ccmc::Point3f::Coordinates)\n"
    "    ccmc::Point3f::Point3f(ccmc::Point3f const &)\n"
    "    ccmc::Point3f::Point3f()\n"
    "    ccmc::Point3f::Point3f(ccmc::Point3f::Coordinates)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Point3f_normalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_normalize" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  (arg1)->normalize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_toString" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = ((ccmc::Point3f const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_magnitude(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_magnitude" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (float)(arg1)->magnitude();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f_distance",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_distance" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point3f_distance" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point3f_distance" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Point3f * >(argp2);
  result = (float)((ccmc::Point3f const *)arg1)->distance((ccmc::Point3f const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f_component1_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component1_set" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f_component1_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->component1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component1_get" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (float) ((arg1)->component1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f_component2_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component2_set" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f_component2_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->component2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component2_get" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (float) ((arg1)->component2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f_component3_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component3_set" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f_component3_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->component3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_component3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_component3_get" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (float) ((arg1)->component3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f___add__" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point3f___add__" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point3f___add__" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Point3f * >(argp2);
  result = ((ccmc::Point3f const *)arg1)->operator +((ccmc::Point3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new ccmc::Point3f(static_cast< const ccmc::Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Point3f___add__)

SWIGINTERN PyObject *_wrap_Point3f___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f___sub__" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point3f___sub__" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point3f___sub__" "', argument " "2"" of type '" "ccmc::Point3f const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Point3f * >(argp2);
  result = ((ccmc::Point3f const *)arg1)->operator -((ccmc::Point3f const &)*arg2);
  resultobj = SWIG_NewPointerObj((new ccmc::Point3f(static_cast< const ccmc::Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Point3f___sub__)

SWIGINTERN PyObject *_wrap_Point3f___mul____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f___mul__" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f___mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = ((ccmc::Point3f const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new ccmc::Point3f(static_cast< const ccmc::Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f___mul____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Point3f result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f___mul__" "', argument " "1"" of type '" "ccmc::Point3f const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((ccmc::Point3f const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new ccmc::Point3f(static_cast< const ccmc::Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Point3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Point3f___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Point3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Point3f___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Point3f___mul__)

SWIGINTERN PyObject *_wrap_Point3f_setCoordinates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  ccmc::Point3f::Coordinates arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point3f_setCoordinates",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_setCoordinates" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point3f_setCoordinates" "', argument " "2"" of type '" "ccmc::Point3f::Coordinates""'");
  } 
  arg2 = static_cast< ccmc::Point3f::Coordinates >(val2);
  (arg1)->setCoordinates(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_getCoordinates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Point3f::Coordinates result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_getCoordinates" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (ccmc::Point3f::Coordinates)(arg1)->getCoordinates();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point3f_getCartesian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Point3f result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point3f_getCartesian" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  result = (arg1)->getCartesian();
  resultobj = SWIG_NewPointerObj((new ccmc::Point3f(static_cast< const ccmc::Point3f& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Point3f(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Point3f *arg1 = (ccmc::Point3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Point3f" "', argument " "1"" of type '" "ccmc::Point3f *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Point3f * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_getAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_getAttributeName" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = (arg1)->getAttributeName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_setAttributeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attribute_setAttributeName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_setAttributeName" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Attribute_setAttributeName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setAttributeName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_setAttributeValue__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attribute_setAttributeValue",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_setAttributeValue" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->setAttributeValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_setAttributeValue__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attribute_setAttributeValue",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_setAttributeValue" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  (arg1)->setAttributeValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_setAttributeValue__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Attribute_setAttributeValue",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_setAttributeValue" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Attribute_setAttributeValue" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  (arg1)->setAttributeValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_setAttributeValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Attribute_setAttributeValue__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Attribute_setAttributeValue__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Attribute_setAttributeValue__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Attribute_setAttributeValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Attribute::setAttributeValue(std::string &)\n"
    "    ccmc::Attribute::setAttributeValue(int &)\n"
    "    ccmc::Attribute::setAttributeValue(float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Attribute_getAttributeType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Attribute::AttributeType result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_getAttributeType" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = (ccmc::Attribute::AttributeType)(arg1)->getAttributeType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_getAttributeFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_getAttributeFloat" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = (float)(arg1)->getAttributeFloat();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_getAttributeString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_getAttributeString" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = (arg1)->getAttributeString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Attribute_getAttributeInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_getAttributeInt" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = (int)(arg1)->getAttributeInt();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Attribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Attribute *)new ccmc::Attribute();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Attribute, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Attribute_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_toString" "', argument " "1"" of type '" "ccmc::Attribute const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  result = ((ccmc::Attribute const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Attribute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Attribute *arg1 = (ccmc::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Attribute, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Attribute" "', argument " "1"" of type '" "ccmc::Attribute *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Attribute * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_open" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_setModelName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_setModelName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_setModelName" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Model_setModelName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->setModelName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getModelName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getModelName" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (arg1)->getModelName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_loadVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_loadVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_loadVariable" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_loadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_loadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->loadVariable((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_unloadVariable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_unloadVariable",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_unloadVariable" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_unloadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_unloadVariable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->unloadVariable((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_loadVariableInt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_loadVariableInt",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_loadVariableInt" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_loadVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_loadVariableInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->loadVariableInt((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMapRW__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getVariableFromMapRW",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getVariableFromMapRW" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getVariableFromMapRW" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getVariableFromMapRW" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariableFromMapRW((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMapRW__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getIntVariableFromMapRW",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getIntVariableFromMapRW" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getIntVariableFromMapRW" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getIntVariableFromMapRW" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getIntVariableFromMapRW((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMap__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getVariableFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getVariableFromMap" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariableFromMap((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMap__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getIntVariableFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getIntVariableFromMap" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getIntVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getIntVariableFromMap" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getIntVariableFromMap((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMap__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getVariableFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getVariableFromMap" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getVariableFromMap" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariableFromMap(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getVariableFromMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getVariableFromMap__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Model_getVariableFromMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Model::getVariableFromMap(std::string const &)\n"
    "    ccmc::Model::getVariableFromMap(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMap__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getIntVariableFromMap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getIntVariableFromMap" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getIntVariableFromMap" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getIntVariableFromMap(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getIntVariableFromMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getIntVariableFromMap__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Model_getIntVariableFromMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Model::getIntVariableFromMap(std::string const &)\n"
    "    ccmc::Model::getIntVariableFromMap(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMapRW__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getVariableFromMapRW",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getVariableFromMapRW" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getVariableFromMapRW" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getVariableFromMapRW(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getVariableFromMapRW(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getVariableFromMapRW__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getVariableFromMapRW__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Model_getVariableFromMapRW'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Model::getVariableFromMapRW(std::string const &)\n"
    "    ccmc::Model::getVariableFromMapRW(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMapRW__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getIntVariableFromMapRW",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getIntVariableFromMapRW" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getIntVariableFromMapRW" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< int,std::allocator< int > > *)(arg1)->getIntVariableFromMapRW(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getIntVariableFromMapRW(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getIntVariableFromMapRW__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getIntVariableFromMapRW__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Model_getIntVariableFromMapRW'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Model::getIntVariableFromMapRW(std::string const &)\n"
    "    ccmc::Model::getIntVariableFromMapRW(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Model_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLoadedVariables" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_setMissingValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_setMissingValue",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_setMissingValue" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_setMissingValue" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->setMissingValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getMissingValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getMissingValue" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (float)(arg1)->getMissingValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getConversionFactorToSI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getConversionFactorToSI",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getConversionFactorToSI" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getConversionFactorToSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getConversionFactorToSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (float)(arg1)->getConversionFactorToSI((std::string const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getNativeUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getNativeUnit",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNativeUnit" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getNativeUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getNativeUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getNativeUnit((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getSIUnit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getSIUnit",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getSIUnit" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getSIUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getSIUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getSIUnit((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getProgress" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (int)(arg1)->getProgress();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getBusyStatus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getBusyStatus" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (int)(arg1)->getBusyStatus();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_close(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_close" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (long)(arg1)->close();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_createNewInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Model(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Model, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Model" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_OpenGGCM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::OpenGGCM *)new ccmc::OpenGGCM();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__OpenGGCM, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_open" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_createNewInterpolator" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getXGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getXGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getXGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getXGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getXGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getXGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getXGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getXGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getXGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getXGrid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getXGrid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getXGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getXGrid(std::string const &)\n"
    "    ccmc::OpenGGCM::getXGrid(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getYGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getYGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getYGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getYGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getYGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getYGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getYGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getYGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getYGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getYGrid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getYGrid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getYGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getYGrid(std::string const &)\n"
    "    ccmc::OpenGGCM::getYGrid(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getZGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getZGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getZGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getZGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getZGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getZGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getZGrid" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getZGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getZGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getZGrid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getZGrid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getZGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getZGrid(std::string const &)\n"
    "    ccmc::OpenGGCM::getZGrid(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getXGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getXGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getXGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getXGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getXGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getXGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getXGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getXGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getXGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getXGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getXGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getXGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getXGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getXGridName(std::string const &)\n"
    "    ccmc::OpenGGCM::getXGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getYGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getYGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getYGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getYGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getYGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getYGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getYGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getYGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getYGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getYGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getYGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getYGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getYGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getYGridName(std::string const &)\n"
    "    ccmc::OpenGGCM::getYGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getZGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getZGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCM_getZGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCM_getZGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getZGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCM_getZGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getZGridName" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCM_getZGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getZGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getZGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCM_getZGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCM_getZGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCM_getZGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCM::getZGridName(std::string const &)\n"
    "    ccmc::OpenGGCM::getZGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCM_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCM_getLoadedVariables" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OpenGGCM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCM *arg1 = (ccmc::OpenGGCM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenGGCM" "', argument " "1"" of type '" "ccmc::OpenGGCM *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_BATSRUS(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUS *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::BATSRUS *)new ccmc::BATSRUS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__BATSRUS, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_BATSRUS_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BATSRUS_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUS_open" "', argument " "1"" of type '" "ccmc::BATSRUS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BATSRUS_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUS_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUS_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUS_createNewInterpolator" "', argument " "1"" of type '" "ccmc::BATSRUS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUS * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUS_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUS_getLoadedVariables" "', argument " "1"" of type '" "ccmc::BATSRUS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUS * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BATSRUS(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUS *arg1 = (ccmc::BATSRUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BATSRUS" "', argument " "1"" of type '" "ccmc::BATSRUS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ENLIL(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::ENLIL *)new ccmc::ENLIL();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__ENLIL, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ENLIL_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ENLIL_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLIL_open" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ENLIL_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLIL_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLIL_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLIL_createNewInterpolator" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLIL_getChangeSignFlag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ENLIL_getChangeSignFlag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLIL_getChangeSignFlag" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ENLIL_getChangeSignFlag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLIL_getChangeSignFlagByID(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ENLIL_getChangeSignFlagByID",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLIL_getChangeSignFlagByID" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ENLIL_getChangeSignFlagByID" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)(arg1)->getChangeSignFlagByID(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLIL_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLIL_getLoadedVariables" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ENLIL(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLIL *arg1 = (ccmc::ENLIL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLIL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ENLIL" "', argument " "1"" of type '" "ccmc::ENLIL *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLIL * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_MAS(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::MAS *)new ccmc::MAS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__MAS, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_MAS_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_open" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_createNewInterpolator" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getRPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getRPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getRPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getRPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getRPosGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getRPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getRPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getRPosGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getRPosGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getRPosGrid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getRPosGrid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getRPosGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getRPosGrid(std::string const &)\n"
    "    ccmc::MAS::getRPosGrid(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getRPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getRPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getRPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getRPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getRPosGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getRPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getRPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getRPosGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getRPosGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getRPosGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getRPosGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getRPosGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getRPosGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getRPosGridName(std::string const &)\n"
    "    ccmc::MAS::getRPosGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLatPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLatPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getLatPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getLatPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getLatPosGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLatPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLatPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getLatPosGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getLatPosGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getLatPosGrid__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getLatPosGrid__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getLatPosGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getLatPosGrid(std::string const &)\n"
    "    ccmc::MAS::getLatPosGrid(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLatPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLatPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getLatPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getLatPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getLatPosGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLatPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLatPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getLatPosGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getLatPosGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLatPosGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getLatPosGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getLatPosGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getLatPosGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getLatPosGridName(std::string const &)\n"
    "    ccmc::MAS::getLatPosGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getLonPosGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLonPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLonPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getLonPosGrid" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getLonPosGrid(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getlonPosGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getlonPosGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getlonPosGrid" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getlonPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getlonPosGrid" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< float,std::allocator< float > > *)(arg1)->getlonPosGrid((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLonPosGridName__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLonPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLonPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAS_getLonPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MAS_getLonPosGridName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getLonPosGridName((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLonPosGridName__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getLonPosGridName",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLonPosGridName" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getLonPosGridName" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->getLonPosGridName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getLonPosGridName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getLonPosGridName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getLonPosGridName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getLonPosGridName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getLonPosGridName(std::string const &)\n"
    "    ccmc::MAS::getLonPosGridName(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getChangeSignFlag__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getChangeSignFlag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getChangeSignFlag" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MAS_getChangeSignFlag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getChangeSignFlag__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAS_getChangeSignFlag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getChangeSignFlag" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAS_getChangeSignFlag" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (bool)(arg1)->getChangeSignFlag(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAS_getChangeSignFlag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MAS_getChangeSignFlag__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MAS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MAS_getChangeSignFlag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MAS_getChangeSignFlag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MAS::getChangeSignFlag(std::string)\n"
    "    ccmc::MAS::getChangeSignFlag(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MAS_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAS_getLoadedVariables" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MAS(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MAS *arg1 = (ccmc::MAS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MAS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MAS" "', argument " "1"" of type '" "ccmc::MAS *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MAS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SWMFIono(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIono *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::SWMFIono *)new ccmc::SWMFIono();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__SWMFIono, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_SWMFIono_open(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SWMFIono_open",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIono, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIono_open" "', argument " "1"" of type '" "ccmc::SWMFIono *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIono * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SWMFIono_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIono_open" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (long)(arg1)->open((std::string const &)*arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIono_createNewInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ccmc::Interpolator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIono, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIono_createNewInterpolator" "', argument " "1"" of type '" "ccmc::SWMFIono *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIono * >(argp1);
  result = (ccmc::Interpolator *)(arg1)->createNewInterpolator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Interpolator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIono_getLoadedVariables(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIono, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIono_getLoadedVariables" "', argument " "1"" of type '" "ccmc::SWMFIono *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIono * >(argp1);
  result = (arg1)->getLoadedVariables();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SWMFIono(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIono *arg1 = (ccmc::SWMFIono *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIono, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SWMFIono" "', argument " "1"" of type '" "ccmc::SWMFIono *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIono * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_BATSRUSInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::BATSRUSInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BATSRUSInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BATSRUSInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::BATSRUSInterpolator *)new ccmc::BATSRUSInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__BATSRUSInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_BATSRUSInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BATSRUSInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::BATSRUSInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUSInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUSInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:BATSRUSInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::BATSRUSInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUSInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUSInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BATSRUSInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::BATSRUSInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUSInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUSInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:BATSRUSInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::BATSRUSInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUSInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "BATSRUSInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BATSRUSInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BATSRUSInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BATSRUSInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_BATSRUSInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_BATSRUSInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__BATSRUSInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_BATSRUSInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BATSRUSInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::BATSRUSInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::BATSRUSInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::BATSRUSInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::BATSRUSInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BATSRUSInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::BATSRUSInterpolator *arg1 = (ccmc::BATSRUSInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__BATSRUSInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BATSRUSInterpolator" "', argument " "1"" of type '" "ccmc::BATSRUSInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::BATSRUSInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ENLILInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::ENLILInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ENLILInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ENLILInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::ENLILInterpolator *)new ccmc::ENLILInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__ENLILInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ENLILInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ENLILInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLILInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLILInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::ENLILInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLILInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ENLILInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ENLILInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ENLILInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLILInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ENLILInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLILInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLILInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::ENLILInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLILInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ENLILInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ENLILInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ENLILInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ENLILInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ENLILInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ENLILInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLILInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ENLILInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLILInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLILInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::ENLILInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLILInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ENLILInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ENLILInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ENLILInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLILInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ENLILInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLILInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ENLILInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::ENLILInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLILInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ENLILInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ENLILInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ENLILInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ENLILInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ENLILInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ENLILInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ENLILInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ENLILInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ENLILInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__ENLILInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ENLILInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__ENLILInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ENLILInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__ENLILInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_ENLILInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__ENLILInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_ENLILInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ENLILInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::ENLILInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::ENLILInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::ENLILInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::ENLILInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ENLILInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::ENLILInterpolator *arg1 = (ccmc::ENLILInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__ENLILInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ENLILInterpolator" "', argument " "1"" of type '" "ccmc::ENLILInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::ENLILInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_MASInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::MASInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MASInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MASInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::MASInterpolator *)new ccmc::MASInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__MASInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_MASInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MASInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MASInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MASInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::MASInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MASInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MASInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MASInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MASInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MASInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:MASInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MASInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MASInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::MASInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MASInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MASInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MASInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MASInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "MASInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "MASInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "MASInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MASInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MASInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MASInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MASInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::MASInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MASInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MASInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MASInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MASInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MASInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:MASInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MASInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MASInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::MASInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MASInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MASInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MASInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MASInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MASInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "MASInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "MASInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "MASInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MASInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MASInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MASInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MASInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MASInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MASInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MASInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MASInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__MASInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_MASInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MASInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::MASInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::MASInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::MASInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::MASInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MASInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::MASInterpolator *arg1 = (ccmc::MASInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__MASInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MASInterpolator" "', argument " "1"" of type '" "ccmc::MASInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::MASInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_OpenGGCMInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::OpenGGCMInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OpenGGCMInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpenGGCMInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::OpenGGCMInterpolator *)new ccmc::OpenGGCMInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__OpenGGCMInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OpenGGCMInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:OpenGGCMInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OpenGGCMInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:OpenGGCMInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_OpenGGCMInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_OpenGGCMInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_OpenGGCMInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_OpenGGCMInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCMInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCMInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::OpenGGCMInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::OpenGGCMInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::OpenGGCMInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_getConversionFactor__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCMInterpolator_getConversionFactor",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_getConversionFactor" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenGGCMInterpolator_getConversionFactor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenGGCMInterpolator_getConversionFactor" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (float)(arg1)->getConversionFactor((std::string const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_getConversionFactor__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OpenGGCMInterpolator_getConversionFactor",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenGGCMInterpolator_getConversionFactor" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OpenGGCMInterpolator_getConversionFactor" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (float)(arg1)->getConversionFactor((long const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OpenGGCMInterpolator_getConversionFactor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_OpenGGCMInterpolator_getConversionFactor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__OpenGGCMInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpenGGCMInterpolator_getConversionFactor__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'OpenGGCMInterpolator_getConversionFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::OpenGGCMInterpolator::getConversionFactor(std::string const &)\n"
    "    ccmc::OpenGGCMInterpolator::getConversionFactor(long const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OpenGGCMInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::OpenGGCMInterpolator *arg1 = (ccmc::OpenGGCMInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__OpenGGCMInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenGGCMInterpolator" "', argument " "1"" of type '" "ccmc::OpenGGCMInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::OpenGGCMInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SWMFIonoInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Model *arg1 = (ccmc::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::SWMFIonoInterpolator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SWMFIonoInterpolator",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1,SWIGTYPE_p_ccmc__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SWMFIonoInterpolator" "', argument " "1"" of type '" "ccmc::Model *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Model * >(argp1);
  result = (ccmc::SWMFIonoInterpolator *)new ccmc::SWMFIonoInterpolator(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__SWMFIonoInterpolator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_SWMFIonoInterpolator_interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SWMFIonoInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::SWMFIonoInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIonoInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIonoInterpolator_interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  std::string *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:SWMFIonoInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::SWMFIonoInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIonoInterpolator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((std::string const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIonoInterpolator_interpolate__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SWMFIonoInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::SWMFIonoInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIonoInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIonoInterpolator_interpolate__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  long *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  float temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  float temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:SWMFIonoInterpolator_interpolate",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "1"" of type '" "ccmc::SWMFIonoInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIonoInterpolator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "4"" of type '" "float""'");
  } 
  temp4 = static_cast< float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "5"" of type '" "float""'");
  } 
  temp5 = static_cast< float >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "6"" of type '" "float &""'"); 
  }
  arg6 = reinterpret_cast< float * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "7"" of type '" "float &""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SWMFIonoInterpolator_interpolate" "', argument " "8"" of type '" "float &""'"); 
  }
  arg8 = reinterpret_cast< float * >(argp8);
  result = (float)(arg1)->interpolate((long const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SWMFIonoInterpolator_interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SWMFIonoInterpolator_interpolate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SWMFIonoInterpolator_interpolate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_SWMFIonoInterpolator_interpolate__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ccmc__SWMFIonoInterpolator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_float, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_float, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_float, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_SWMFIonoInterpolator_interpolate__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SWMFIonoInterpolator_interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::SWMFIonoInterpolator::interpolate(std::string const &,float const &,float const &,float const &)\n"
    "    ccmc::SWMFIonoInterpolator::interpolate(std::string const &,float const &,float const &,float const &,float &,float &,float &)\n"
    "    ccmc::SWMFIonoInterpolator::interpolate(long const &,float const &,float const &,float const &)\n"
    "    ccmc::SWMFIonoInterpolator::interpolate(long const &,float const &,float const &,float const &,float &,float &,float &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SWMFIonoInterpolator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::SWMFIonoInterpolator *arg1 = (ccmc::SWMFIonoInterpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__SWMFIonoInterpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SWMFIonoInterpolator" "', argument " "1"" of type '" "ccmc::SWMFIonoInterpolator *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::SWMFIonoInterpolator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Time__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  ccmc::Time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Time",&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Time" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Time" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (ccmc::Time *)new ccmc::Time((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Time, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_Time__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  ccmc::Time *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Time",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Time" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (ccmc::Time *)new ccmc::Time(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Time, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Time__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (ccmc::Time *)new ccmc::Time();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Time, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Time(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Time__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Time__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Time__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Time'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ccmc::Time::Time(std::string const &)\n"
    "    ccmc::Time::Time(double)\n"
    "    ccmc::Time::Time()\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Time_getDay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getDay" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getDay();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setDay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setDay",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setDay" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setDay" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setDay(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setEpoch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setEpoch",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setEpoch" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setEpoch" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setEpoch(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getHour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getHour" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getHour();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setHour(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setHour",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setHour" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setHour" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setHour(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getMilliseconds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getMilliseconds" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getMilliseconds();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setMilliseconds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setMilliseconds",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setMilliseconds" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setMilliseconds" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setMilliseconds(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getMinute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getMinute" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getMinute();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setMinute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setMinute",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setMinute" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setMinute" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setMinute(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getMonth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getMonth" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getMonth();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setMonth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setMonth",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setMonth" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setMonth" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setMonth(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getSeconds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getSeconds" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getSeconds();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setSeconds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setSeconds",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setSeconds" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setSeconds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setSeconds(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getYear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getYear" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (short)((ccmc::Time const *)arg1)->getYear();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_setYear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Time_setYear",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_setYear" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_setYear" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->setYear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_toString" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = ((ccmc::Time const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_getEpoch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_getEpoch" "', argument " "1"" of type '" "ccmc::Time const *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  result = (double)((ccmc::Time const *)arg1)->getEpoch();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Time(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = (ccmc::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_ccmc__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Time" "', argument " "1"" of type '" "ccmc::Time *""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  ccmc::Time arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "ccmc::Time const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "ccmc::Time const""'");
    } else {
      ccmc::Time * temp = reinterpret_cast< ccmc::Time * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::ostream *) &ccmc::operator <<(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = 0 ;
  ccmc::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Time * >(argp2);
  result = (double)ccmc::operator -((ccmc::Time const &)*arg1,(ccmc::Time const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = 0 ;
  ccmc::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Time * >(argp2);
  result = (bool)ccmc::operator ==((ccmc::Time const &)*arg1,(ccmc::Time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = 0 ;
  ccmc::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Time * >(argp2);
  result = (bool)ccmc::operator <((ccmc::Time const &)*arg1,(ccmc::Time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = 0 ;
  ccmc::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Time * >(argp2);
  result = (bool)ccmc::operator >((ccmc::Time const &)*arg1,(ccmc::Time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ge__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ccmc::Time *arg1 = 0 ;
  ccmc::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ge__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "1"" of type '" "ccmc::Time const &""'"); 
  }
  arg1 = reinterpret_cast< ccmc::Time * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ge__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "2"" of type '" "ccmc::Time const &""'"); 
  }
  arg2 = reinterpret_cast< ccmc::Time * >(argp2);
  result = (bool)ccmc::operator >=((ccmc::Time const &)*arg1,(ccmc::Time const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_iterator" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_Point3f_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___nonzero__" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (bool)vector_Sl_Point3f_Sg____nonzero__((vector< ccmc::Point3f > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_vector_point3f___nonzero__)

SWIGINTERN PyObject *_wrap_vector_point3f___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___bool__" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (bool)vector_Sl_Point3f_Sg____bool__((vector< ccmc::Point3f > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___len__" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = vector_Sl_Point3f_Sg____len__((vector< ccmc::Point3f > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_vector_point3f___len__)

SWIGINTERN PyObject *_wrap_vector_point3f_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_pop" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  try {
    result = vector_Sl_Point3f_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new vector< ccmc::Point3f >::value_type(static_cast< const vector< ccmc::Point3f >::value_type& >(result))), SWIGTYPE_p_ccmc__Point3f, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  vector< ccmc::Point3f >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___getslice__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___getslice__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_point3f___getslice__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Point3f >::difference_type >(val3);
  try {
    result = (std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *)vector_Sl_Point3f_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  vector< ccmc::Point3f >::difference_type arg3 ;
  std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_point3f___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___setslice__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___setslice__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_point3f___setslice__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Point3f >::difference_type >(val3);
  {
    std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *ptr = (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_point3f___setslice__" "', argument " "4"" of type '" "std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f___setslice__" "', argument " "4"" of type '" "std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_Point3f_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  vector< ccmc::Point3f >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___setslice__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___setslice__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_point3f___setslice__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Point3f >::difference_type >(val3);
  try {
    vector_Sl_Point3f_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_point3f___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_point3f___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::__setslice__(vector< ccmc::Point3f >::difference_type,vector< ccmc::Point3f >::difference_type,std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &)\n"
    "    vector< Point3f >::__setslice__(vector< ccmc::Point3f >::difference_type,vector< ccmc::Point3f >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_point3f___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  vector< ccmc::Point3f >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___delslice__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___delslice__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_point3f___delslice__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Point3f >::difference_type >(val3);
  try {
    vector_Sl_Point3f_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___delitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___delitem__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  try {
    vector_Sl_Point3f_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___getitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *)vector_Sl_Point3f_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___setitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *ptr = (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_point3f___setitem__" "', argument " "3"" of type '" "std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f___setitem__" "', argument " "3"" of type '" "std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_Point3f_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___setitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Point3f_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___delitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Point3f_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_point3f___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_point3f___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::__delitem__(vector< ccmc::Point3f >::difference_type)\n"
    "    vector< Point3f >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_point3f___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  vector< ccmc::Point3f >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___getitem__" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___getitem__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  try {
    result = (vector< ccmc::Point3f >::value_type *) &vector_Sl_Point3f_Sg____getitem____SWIG_1((vector< ccmc::Point3f > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_point3f___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_point3f___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::__getitem__(PySliceObject *)\n"
    "    vector< Point3f >::__getitem__(vector< ccmc::Point3f >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_point3f___getitem__)

SWIGINTERN PyObject *_wrap_vector_point3f___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::difference_type arg2 ;
  vector< ccmc::Point3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f___setitem__" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f___setitem__" "', argument " "2"" of type '" "vector< ccmc::Point3f >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_point3f___setitem__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f___setitem__" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp3);
  try {
    vector_Sl_Point3f_Sg____setitem____SWIG_2(arg1,arg2,(ccmc::Point3f const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_point3f___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_point3f___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Point3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_point3f___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::__setitem__(PySliceObject *,std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > const &)\n"
    "    vector< Point3f >::__setitem__(PySliceObject *)\n"
    "    vector< Point3f >::__setitem__(vector< ccmc::Point3f >::difference_type,vector< ccmc::Point3f >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_point3f___setitem__)

SWIGINTERN PyObject *_wrap_vector_point3f_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_append" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_point3f_append" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_append" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp2);
  vector_Sl_Point3f_Sg__append(arg1,(ccmc::Point3f const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_point3f__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (vector< Point3f > *)new vector< Point3f >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_point3f__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Point3f > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  vector< Point3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_point3f",&obj1)) SWIG_fail;
  {
    std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *ptr = (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_point3f" "', argument " "1"" of type '" "std::vector< Point3f > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_point3f" "', argument " "1"" of type '" "std::vector< Point3f > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< Point3f > *)new vector< Point3f >((std::vector< Point3f > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_point3f_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_empty" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (bool)((vector< Point3f > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_size" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = ((vector< Point3f > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_clear" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  std::vector< Point3f > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_swap" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_point3f_swap" "', argument " "2"" of type '" "std::vector< Point3f > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_swap" "', argument " "2"" of type '" "std::vector< Point3f > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Point3f > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< ccmc::Point3f > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_get_allocator" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = ((vector< Point3f > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< ccmc::Point3f >::allocator_type(static_cast< const vector< ccmc::Point3f >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_ccmc__Point3f_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_begin" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_end" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::reverse_iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_rbegin" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::reverse_iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_rend" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_point3f__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< ccmc::Point3f >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Point3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_point3f",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_point3f" "', argument " "1"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg1 = static_cast< vector< ccmc::Point3f >::size_type >(val1);
  result = (vector< Point3f > *)new vector< Point3f >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_point3f_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_pop_back" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_resize" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f_resize" "', argument " "2"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_erase" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > arg2 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_erase" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "3"" of type '" "vector< ccmc::Point3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_erase" "', argument " "3"" of type '" "vector< ccmc::Point3f >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_point3f_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_point3f_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::erase(vector< ccmc::Point3f >::iterator)\n"
    "    vector< Point3f >::erase(vector< ccmc::Point3f >::iterator,vector< ccmc::Point3f >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_point3f__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< ccmc::Point3f >::size_type arg1 ;
  vector< ccmc::Point3f >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Point3f > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_point3f",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_point3f" "', argument " "1"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg1 = static_cast< vector< ccmc::Point3f >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_point3f" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_point3f" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp2);
  result = (vector< Point3f > *)new vector< Point3f >(arg1,(vector< ccmc::Point3f >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_point3f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_point3f__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_point3f__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ccmc::Point3f,std::allocator< ccmc::Point3f > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_point3f__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccmc__Point3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_point3f__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_point3f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::vector()\n"
    "    vector< Point3f >::vector(std::vector< Point3f > const &)\n"
    "    vector< Point3f >::vector(vector< ccmc::Point3f >::size_type)\n"
    "    vector< Point3f >::vector(vector< ccmc::Point3f >::size_type,vector< ccmc::Point3f >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_point3f_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_push_back" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_point3f_push_back" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_push_back" "', argument " "2"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp2);
  (arg1)->push_back((vector< ccmc::Point3f >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_front" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (vector< ccmc::Point3f >::value_type *) &((vector< Point3f > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_back" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = (vector< ccmc::Point3f >::value_type *) &((vector< Point3f > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Point3f, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type arg2 ;
  vector< ccmc::Point3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_assign" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f_assign" "', argument " "2"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_point3f_assign" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_assign" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp3);
  (arg1)->assign(arg2,(vector< ccmc::Point3f >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type arg2 ;
  vector< ccmc::Point3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_resize" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f_resize" "', argument " "2"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_point3f_resize" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_resize" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp3);
  (arg1)->resize(arg2,(vector< ccmc::Point3f >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_point3f_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Point3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_point3f_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::resize(vector< ccmc::Point3f >::size_type)\n"
    "    vector< Point3f >::resize(vector< ccmc::Point3f >::size_type,vector< ccmc::Point3f >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_point3f_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > arg2 ;
  vector< ccmc::Point3f >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_point3f_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_insert" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_insert" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_insert" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_point3f_insert" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_insert" "', argument " "3"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(vector< ccmc::Point3f >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Point3f >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  SwigValueWrapper< vector< ccmc::Point3f >::iterator > arg2 ;
  vector< ccmc::Point3f >::size_type arg3 ;
  vector< ccmc::Point3f >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_point3f_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_insert" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_insert" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_point3f_insert" "', argument " "2"" of type '" "vector< ccmc::Point3f >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_point3f_insert" "', argument " "3"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Point3f >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ccmc__Point3f,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_point3f_insert" "', argument " "4"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_point3f_insert" "', argument " "4"" of type '" "vector< ccmc::Point3f >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< vector< ccmc::Point3f >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(vector< ccmc::Point3f >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Point3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_point3f_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Point3f >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ccmc__Point3f, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_point3f_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_point3f_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Point3f >::insert(vector< ccmc::Point3f >::iterator,vector< ccmc::Point3f >::value_type const &)\n"
    "    vector< Point3f >::insert(vector< ccmc::Point3f >::iterator,vector< ccmc::Point3f >::size_type,vector< ccmc::Point3f >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_point3f_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  vector< ccmc::Point3f >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_point3f_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_reserve" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_point3f_reserve" "', argument " "2"" of type '" "vector< ccmc::Point3f >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Point3f >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_point3f_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Point3f >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_point3f_capacity" "', argument " "1"" of type '" "vector< Point3f > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  result = ((vector< Point3f > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_point3f(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Point3f > *arg1 = (vector< Point3f > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_point3f" "', argument " "1"" of type '" "vector< Point3f > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Point3f > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_iterator" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___nonzero__" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (bool)vector_Sl_std_string_Sg____nonzero__((vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_vector_string___nonzero__)

SWIGINTERN PyObject *_wrap_vector_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___bool__" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (bool)vector_Sl_std_string_Sg____bool__((vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___len__" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = vector_Sl_std_string_Sg____len__((vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_vector_string___len__)

SWIGINTERN PyObject *_wrap_vector_string_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  try {
    result = vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getslice__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getslice__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___getslice__" "', argument " "3"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< vector< std::string >::difference_type >(val3);
  try {
    vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_string___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::__setslice__(vector< std::string >::difference_type,vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    vector< std::string >::__setslice__(vector< std::string >::difference_type,vector< std::string >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delslice__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delslice__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___delslice__" "', argument " "3"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< vector< std::string >::difference_type >(val3);
  try {
    vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  try {
    vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::__delitem__(vector< std::string >::difference_type)\n"
    "    vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  try {
    result = (vector< std::string >::value_type *) &vector_Sl_std_string_Sg____getitem____SWIG_1((vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::__getitem__(PySliceObject *)\n"
    "    vector< std::string >::__getitem__(vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_string___getitem__)

SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::difference_type arg2 ;
  vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    vector< std::string >::__setitem__(PySliceObject *)\n"
    "    vector< std::string >::__setitem__(vector< std::string >::difference_type,vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_string___setitem__)

SWIGINTERN PyObject *_wrap_vector_string_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_append" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_append" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_append" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (vector< std::string > *)new vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_string",&obj1)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< std::string > *)new vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_empty" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (bool)((vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_size" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = ((vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_clear" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_swap" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_get_allocator" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = ((vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< std::string >::allocator_type(static_cast< const vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_begin" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_end" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rbegin" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rend" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_string",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< vector< std::string >::size_type >(val1);
  result = (vector< std::string > *)new vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop_back" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::iterator arg2 ;
  vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_string_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_string_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::erase(vector< std::string >::iterator)\n"
    "    vector< std::string >::erase(vector< std::string >::iterator,vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_string__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string >::size_type arg1 ;
  vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_string",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_string" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (vector< std::string > *)new vector< std::string >(arg1,(vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return -1;
}


SWIGINTERN int _wrap_new_vector_string(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_string__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_string__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_string__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_string__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::vector()\n"
    "    vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    vector< std::string >::vector(vector< std::string >::size_type)\n"
    "    vector< std::string >::vector(vector< std::string >::size_type,vector< std::string >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_string_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_push_back" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_push_back" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_push_back" "', argument " "2"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_front" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (vector< std::string >::value_type *) &((vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_back" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = (vector< std::string >::value_type *) &((vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type arg2 ;
  vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_assign" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_assign" "', argument " "2"" of type '" "vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_assign" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_assign" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type arg2 ;
  vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_resize" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_resize" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::resize(vector< std::string >::size_type)\n"
    "    vector< std::string >::resize(vector< std::string >::size_type,vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::iterator arg2 ;
  vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_string_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "3"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::iterator arg2 ;
  vector< std::string >::size_type arg3 ;
  vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_string_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string_insert" "', argument " "4"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "4"" of type '" "vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(vector< std::string >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< std::string >::insert(vector< std::string >::iterator,vector< std::string >::value_type const &)\n"
    "    vector< std::string >::insert(vector< std::string >::iterator,vector< std::string >::size_type,vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_string_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_reserve" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_reserve" "', argument " "2"" of type '" "vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< std::string >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_capacity" "', argument " "1"" of type '" "vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  result = ((vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< std::string > *arg1 = (vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_string" "', argument " "1"" of type '" "vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_iterator" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_float_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___nonzero__" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (bool)vector_Sl_float_Sg____nonzero__((vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_vector_float___nonzero__)

SWIGINTERN PyObject *_wrap_vector_float___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___bool__" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (bool)vector_Sl_float_Sg____bool__((vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___len__" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = vector_Sl_float_Sg____len__((vector< float > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_vector_float___len__)

SWIGINTERN PyObject *_wrap_vector_float_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  try {
    result = (vector< float >::value_type)vector_Sl_float_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getslice__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getslice__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___getslice__" "', argument " "3"" of type '" "vector< float >::difference_type""'");
  } 
  arg3 = static_cast< vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_float___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setslice__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setslice__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setslice__" "', argument " "3"" of type '" "vector< float >::difference_type""'");
  } 
  arg3 = static_cast< vector< float >::difference_type >(val3);
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_float_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< float,std::allocator< float > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setslice__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setslice__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setslice__" "', argument " "3"" of type '" "vector< float >::difference_type""'");
  } 
  arg3 = static_cast< vector< float >::difference_type >(val3);
  try {
    vector_Sl_float_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<float,std::allocator< float > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_float___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::__setslice__(vector< float >::difference_type,vector< float >::difference_type,std::vector< float,std::allocator< float > > const &)\n"
    "    vector< float >::__setslice__(vector< float >::difference_type,vector< float >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delslice__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delslice__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___delslice__" "', argument " "3"" of type '" "vector< float >::difference_type""'");
  } 
  arg3 = static_cast< vector< float >::difference_type >(val3);
  try {
    vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delitem__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  try {
    vector_Sl_float_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< float,std::allocator< float > > *)vector_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< float,std::allocator< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_float_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_float_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::__delitem__(vector< float >::difference_type)\n"
    "    vector< float >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getitem__" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getitem__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  try {
    result = (vector< float >::value_type *) &vector_Sl_float_Sg____getitem____SWIG_1((vector< float > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::__getitem__(PySliceObject *)\n"
    "    vector< float >::__getitem__(vector< float >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_float___getitem__)

SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::difference_type arg2 ;
  vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "vector< float >::difference_type""'");
  } 
  arg2 = static_cast< vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "vector< float >::value_type""'");
  } 
  temp3 = static_cast< vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    vector_Sl_float_Sg____setitem____SWIG_2(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<float,std::allocator< float > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_float___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::__setitem__(PySliceObject *,std::vector< float,std::allocator< float > > const &)\n"
    "    vector< float >::__setitem__(PySliceObject *)\n"
    "    vector< float >::__setitem__(vector< float >::difference_type,vector< float >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_float___setitem__)

SWIGINTERN PyObject *_wrap_vector_float_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_append" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_append" "', argument " "2"" of type '" "vector< float >::value_type""'");
  } 
  temp2 = static_cast< vector< float >::value_type >(val2);
  arg2 = &temp2;
  vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_float__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (vector< float > *)new vector< float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_float__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_float",&obj1)) SWIG_fail;
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< float > *)new vector< float >((std::vector< float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_float_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_empty" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (bool)((vector< float > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_size" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = ((vector< float > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_clear" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_swap" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< float > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_get_allocator" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = ((vector< float > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< float >::allocator_type(static_cast< const vector< float >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_begin" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_end" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_rbegin" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_rend" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_float__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_float",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "vector< float >::size_type""'");
  } 
  arg1 = static_cast< vector< float >::size_type >(val1);
  result = (vector< float > *)new vector< float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_float_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop_back" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "vector< float >::size_type""'");
  } 
  arg2 = static_cast< vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_erase" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "vector< float >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::iterator arg2 ;
  vector< float >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_erase" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "vector< float >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "3"" of type '" "vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "3"" of type '" "vector< float >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_float_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_float_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::erase(vector< float >::iterator)\n"
    "    vector< float >::erase(vector< float >::iterator,vector< float >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_float__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float >::size_type arg1 ;
  vector< float >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_float",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "vector< float >::size_type""'");
  } 
  arg1 = static_cast< vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_float" "', argument " "2"" of type '" "vector< float >::value_type""'");
  } 
  temp2 = static_cast< vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (vector< float > *)new vector< float >(arg1,(vector< float >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_float(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_float__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_float__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_float__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_float__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_float'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::vector()\n"
    "    vector< float >::vector(std::vector< float > const &)\n"
    "    vector< float >::vector(vector< float >::size_type)\n"
    "    vector< float >::vector(vector< float >::size_type,vector< float >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_float_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_push_back" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_push_back" "', argument " "2"" of type '" "vector< float >::value_type""'");
  } 
  temp2 = static_cast< vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((vector< float >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_front" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (vector< float >::value_type *) &((vector< float > const *)arg1)->front();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_back" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = (vector< float >::value_type *) &((vector< float > const *)arg1)->back();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type arg2 ;
  vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_assign" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_assign" "', argument " "2"" of type '" "vector< float >::size_type""'");
  } 
  arg2 = static_cast< vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_assign" "', argument " "3"" of type '" "vector< float >::value_type""'");
  } 
  temp3 = static_cast< vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type arg2 ;
  vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "vector< float >::size_type""'");
  } 
  arg2 = static_cast< vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_resize" "', argument " "3"" of type '" "vector< float >::value_type""'");
  } 
  temp3 = static_cast< vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::resize(vector< float >::size_type)\n"
    "    vector< float >::resize(vector< float >::size_type,vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::iterator arg2 ;
  vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_float_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_insert" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_insert" "', argument " "3"" of type '" "vector< float >::value_type""'");
  } 
  temp3 = static_cast< vector< float >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(vector< float >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::iterator arg2 ;
  vector< float >::size_type arg3 ;
  vector< float >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  vector< float >::value_type temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_float_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_insert" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_insert" "', argument " "3"" of type '" "vector< float >::size_type""'");
  } 
  arg3 = static_cast< vector< float >::size_type >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_float_insert" "', argument " "4"" of type '" "vector< float >::value_type""'");
  } 
  temp4 = static_cast< vector< float >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(vector< float >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_float_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_float_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< float >::insert(vector< float >::iterator,vector< float >::value_type const &)\n"
    "    vector< float >::insert(vector< float >::iterator,vector< float >::size_type,vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_float_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_reserve" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_reserve" "', argument " "2"" of type '" "vector< float >::size_type""'");
  } 
  arg2 = static_cast< vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< float >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_capacity" "', argument " "1"" of type '" "vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  result = ((vector< float > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_float(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< float > *arg1 = (vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_float" "', argument " "1"" of type '" "vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< vector< float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_iterator" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_Fieldline_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___nonzero__" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (bool)vector_Sl_Fieldline_Sg____nonzero__((vector< ccmc::Fieldline > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_vector_fieldline___nonzero__)

SWIGINTERN PyObject *_wrap_vector_fieldline___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___bool__" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (bool)vector_Sl_Fieldline_Sg____bool__((vector< ccmc::Fieldline > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___len__" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = vector_Sl_Fieldline_Sg____len__((vector< ccmc::Fieldline > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_vector_fieldline___len__)

SWIGINTERN PyObject *_wrap_vector_fieldline_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_pop" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  try {
    result = vector_Sl_Fieldline_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new vector< ccmc::Fieldline >::value_type(static_cast< const vector< ccmc::Fieldline >::value_type& >(result))), SWIGTYPE_p_ccmc__Fieldline, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  vector< ccmc::Fieldline >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___getslice__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___getslice__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_fieldline___getslice__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Fieldline >::difference_type >(val3);
  try {
    result = (std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *)vector_Sl_Fieldline_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  vector< ccmc::Fieldline >::difference_type arg3 ;
  std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_fieldline___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___setslice__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___setslice__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_fieldline___setslice__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Fieldline >::difference_type >(val3);
  {
    std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *ptr = (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_fieldline___setslice__" "', argument " "4"" of type '" "std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline___setslice__" "', argument " "4"" of type '" "std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_Fieldline_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  vector< ccmc::Fieldline >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___setslice__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___setslice__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_fieldline___setslice__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Fieldline >::difference_type >(val3);
  try {
    vector_Sl_Fieldline_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_fieldline___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_fieldline___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::__setslice__(vector< ccmc::Fieldline >::difference_type,vector< ccmc::Fieldline >::difference_type,std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &)\n"
    "    vector< Fieldline >::__setslice__(vector< ccmc::Fieldline >::difference_type,vector< ccmc::Fieldline >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  vector< ccmc::Fieldline >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___delslice__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___delslice__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_fieldline___delslice__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Fieldline >::difference_type >(val3);
  try {
    vector_Sl_Fieldline_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___delitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___delitem__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  try {
    vector_Sl_Fieldline_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___getitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *)vector_Sl_Fieldline_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___setitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *ptr = (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_fieldline___setitem__" "', argument " "3"" of type '" "std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline___setitem__" "', argument " "3"" of type '" "std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_Fieldline_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___setitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Fieldline_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___delitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_Fieldline_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_fieldline___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_fieldline___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::__delitem__(vector< ccmc::Fieldline >::difference_type)\n"
    "    vector< Fieldline >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  vector< ccmc::Fieldline >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___getitem__" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___getitem__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  try {
    result = (vector< ccmc::Fieldline >::value_type *) &vector_Sl_Fieldline_Sg____getitem____SWIG_1((vector< ccmc::Fieldline > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_fieldline___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_fieldline___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::__getitem__(PySliceObject *)\n"
    "    vector< Fieldline >::__getitem__(vector< ccmc::Fieldline >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_fieldline___getitem__)

SWIGINTERN PyObject *_wrap_vector_fieldline___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::difference_type arg2 ;
  vector< ccmc::Fieldline >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline___setitem__" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline___setitem__" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::difference_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_fieldline___setitem__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline___setitem__" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp3);
  try {
    vector_Sl_Fieldline_Sg____setitem____SWIG_2(arg1,arg2,(ccmc::Fieldline const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_fieldline___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_fieldline___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Fieldline, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_fieldline___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::__setitem__(PySliceObject *,std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > const &)\n"
    "    vector< Fieldline >::__setitem__(PySliceObject *)\n"
    "    vector< Fieldline >::__setitem__(vector< ccmc::Fieldline >::difference_type,vector< ccmc::Fieldline >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_fieldline___setitem__)

SWIGINTERN PyObject *_wrap_vector_fieldline_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_append" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_fieldline_append" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_append" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp2);
  vector_Sl_Fieldline_Sg__append(arg1,(ccmc::Fieldline const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_fieldline__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (vector< Fieldline > *)new vector< Fieldline >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_fieldline__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Fieldline > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  vector< Fieldline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_fieldline",&obj1)) SWIG_fail;
  {
    std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *ptr = (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_fieldline" "', argument " "1"" of type '" "std::vector< Fieldline > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_fieldline" "', argument " "1"" of type '" "std::vector< Fieldline > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< Fieldline > *)new vector< Fieldline >((std::vector< Fieldline > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_empty" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (bool)((vector< Fieldline > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_size" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = ((vector< Fieldline > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_clear" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  std::vector< Fieldline > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_swap" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_fieldline_swap" "', argument " "2"" of type '" "std::vector< Fieldline > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_swap" "', argument " "2"" of type '" "std::vector< Fieldline > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Fieldline > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< ccmc::Fieldline > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_get_allocator" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = ((vector< Fieldline > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< ccmc::Fieldline >::allocator_type(static_cast< const vector< ccmc::Fieldline >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_ccmc__Fieldline_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_begin" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_end" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::reverse_iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_rbegin" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::reverse_iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_rend" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_fieldline__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< ccmc::Fieldline >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  vector< Fieldline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_fieldline",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_fieldline" "', argument " "1"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg1 = static_cast< vector< ccmc::Fieldline >::size_type >(val1);
  result = (vector< Fieldline > *)new vector< Fieldline >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_pop_back" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_resize" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline_resize" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_erase" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > arg2 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_erase" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_erase" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_fieldline_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_fieldline_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::erase(vector< ccmc::Fieldline >::iterator)\n"
    "    vector< Fieldline >::erase(vector< ccmc::Fieldline >::iterator,vector< ccmc::Fieldline >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_fieldline__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< ccmc::Fieldline >::size_type arg1 ;
  vector< ccmc::Fieldline >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< Fieldline > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_fieldline",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_fieldline" "', argument " "1"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg1 = static_cast< vector< ccmc::Fieldline >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_fieldline" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_fieldline" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp2);
  result = (vector< Fieldline > *)new vector< Fieldline >(arg1,(vector< ccmc::Fieldline >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_fieldline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_fieldline__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_fieldline__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<ccmc::Fieldline,std::allocator< ccmc::Fieldline > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_fieldline__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ccmc__Fieldline, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_fieldline__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_fieldline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::vector()\n"
    "    vector< Fieldline >::vector(std::vector< Fieldline > const &)\n"
    "    vector< Fieldline >::vector(vector< ccmc::Fieldline >::size_type)\n"
    "    vector< Fieldline >::vector(vector< ccmc::Fieldline >::size_type,vector< ccmc::Fieldline >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_push_back" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_fieldline_push_back" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_push_back" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp2);
  (arg1)->push_back((vector< ccmc::Fieldline >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_front" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (vector< ccmc::Fieldline >::value_type *) &((vector< Fieldline > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_back" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = (vector< ccmc::Fieldline >::value_type *) &((vector< Fieldline > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ccmc__Fieldline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type arg2 ;
  vector< ccmc::Fieldline >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_assign" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline_assign" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_fieldline_assign" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_assign" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp3);
  (arg1)->assign(arg2,(vector< ccmc::Fieldline >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type arg2 ;
  vector< ccmc::Fieldline >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_resize" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline_resize" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_fieldline_resize" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_resize" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp3);
  (arg1)->resize(arg2,(vector< ccmc::Fieldline >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_fieldline_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Fieldline, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_fieldline_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::resize(vector< ccmc::Fieldline >::size_type)\n"
    "    vector< Fieldline >::resize(vector< ccmc::Fieldline >::size_type,vector< ccmc::Fieldline >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > arg2 ;
  vector< ccmc::Fieldline >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_fieldline_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_insert" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_insert" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_insert" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_fieldline_insert" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_insert" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(vector< ccmc::Fieldline >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< ccmc::Fieldline >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  SwigValueWrapper< vector< ccmc::Fieldline >::iterator > arg2 ;
  vector< ccmc::Fieldline >::size_type arg3 ;
  vector< ccmc::Fieldline >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_fieldline_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_insert" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_insert" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_fieldline_insert" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_fieldline_insert" "', argument " "3"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg3 = static_cast< vector< ccmc::Fieldline >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ccmc__Fieldline,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_fieldline_insert" "', argument " "4"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_fieldline_insert" "', argument " "4"" of type '" "vector< ccmc::Fieldline >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< vector< ccmc::Fieldline >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(vector< ccmc::Fieldline >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_ccmc__Fieldline, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_fieldline_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< ccmc::Fieldline >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ccmc__Fieldline, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_fieldline_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_fieldline_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< Fieldline >::insert(vector< ccmc::Fieldline >::iterator,vector< ccmc::Fieldline >::value_type const &)\n"
    "    vector< Fieldline >::insert(vector< ccmc::Fieldline >::iterator,vector< ccmc::Fieldline >::size_type,vector< ccmc::Fieldline >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  vector< ccmc::Fieldline >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_fieldline_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_reserve" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_fieldline_reserve" "', argument " "2"" of type '" "vector< ccmc::Fieldline >::size_type""'");
  } 
  arg2 = static_cast< vector< ccmc::Fieldline >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_fieldline_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< ccmc::Fieldline >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_fieldline_capacity" "', argument " "1"" of type '" "vector< Fieldline > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  result = ((vector< Fieldline > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_fieldline(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< Fieldline > *arg1 = (vector< Fieldline > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_fieldline" "', argument " "1"" of type '" "vector< Fieldline > *""'"); 
  }
  arg1 = reinterpret_cast< vector< Fieldline > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_iterator" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___nonzero__" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (bool)vector_Sl_int_Sg____nonzero__((vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_vector_int___nonzero__)

SWIGINTERN PyObject *_wrap_vector_int___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___bool__" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (bool)vector_Sl_int_Sg____bool__((vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___len__" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = vector_Sl_int_Sg____len__((vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_vector_int___len__)

SWIGINTERN PyObject *_wrap_vector_int_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_pop" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  try {
    result = (vector< int >::value_type)vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getslice__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___getslice__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___getslice__" "', argument " "3"" of type '" "vector< int >::difference_type""'");
  } 
  arg3 = static_cast< vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_int___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setslice__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setslice__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setslice__" "', argument " "3"" of type '" "vector< int >::difference_type""'");
  } 
  arg3 = static_cast< vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setslice__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setslice__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setslice__" "', argument " "3"" of type '" "vector< int >::difference_type""'");
  } 
  arg3 = static_cast< vector< int >::difference_type >(val3);
  try {
    vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::__setslice__(vector< int >::difference_type,vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n"
    "    vector< int >::__setslice__(vector< int >::difference_type,vector< int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delslice__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___delslice__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___delslice__" "', argument " "3"" of type '" "vector< int >::difference_type""'");
  } 
  arg3 = static_cast< vector< int >::difference_type >(val3);
  try {
    vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___delitem__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  try {
    vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::__delitem__(vector< int >::difference_type)\n"
    "    vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getitem__" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___getitem__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  try {
    result = (vector< int >::value_type *) &vector_Sl_int_Sg____getitem____SWIG_1((vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::__getitem__(PySliceObject *)\n"
    "    vector< int >::__getitem__(vector< int >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_vector_int___getitem__)

SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::difference_type arg2 ;
  vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "vector< int >::difference_type""'");
  } 
  arg2 = static_cast< vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "vector< int >::value_type""'");
  } 
  temp3 = static_cast< vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    vector< int >::__setitem__(PySliceObject *)\n"
    "    vector< int >::__setitem__(vector< int >::difference_type,vector< int >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_vector_int___setitem__)

SWIGINTERN PyObject *_wrap_vector_int_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_append" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_append" "', argument " "2"" of type '" "vector< int >::value_type""'");
  } 
  temp2 = static_cast< vector< int >::value_type >(val2);
  arg2 = &temp2;
  vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_int__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  result = (vector< int > *)new vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_int__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_int",&obj1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (vector< int > *)new vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_int_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_empty" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (bool)((vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_size" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = ((vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_clear" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_swap" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_get_allocator" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = ((vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new vector< int >::allocator_type(static_cast< const vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_begin" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_end" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_rbegin" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_rend" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_vector_int__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vector_int",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int" "', argument " "1"" of type '" "vector< int >::size_type""'");
  } 
  arg1 = static_cast< vector< int >::size_type >(val1);
  result = (vector< int > *)new vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_int_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_pop_back" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_resize" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_resize" "', argument " "2"" of type '" "vector< int >::size_type""'");
  } 
  arg2 = static_cast< vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_erase" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::iterator arg2 ;
  vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_erase" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "3"" of type '" "vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "3"" of type '" "vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_int_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_int_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::erase(vector< int >::iterator)\n"
    "    vector< int >::erase(vector< int >::iterator,vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_vector_int__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int >::size_type arg1 ;
  vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vector_int",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int" "', argument " "1"" of type '" "vector< int >::size_type""'");
  } 
  arg1 = static_cast< vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_int" "', argument " "2"" of type '" "vector< int >::value_type""'");
  } 
  temp2 = static_cast< vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (vector< int > *)new vector< int >(arg1,(vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_vector_int(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vector_int__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_int__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_int__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_int__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vector_int'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::vector()\n"
    "    vector< int >::vector(std::vector< int > const &)\n"
    "    vector< int >::vector(vector< int >::size_type)\n"
    "    vector< int >::vector(vector< int >::size_type,vector< int >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_vector_int_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_push_back" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_push_back" "', argument " "2"" of type '" "vector< int >::value_type""'");
  } 
  temp2 = static_cast< vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_front" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (vector< int >::value_type *) &((vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_back" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = (vector< int >::value_type *) &((vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type arg2 ;
  vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_assign" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_assign" "', argument " "2"" of type '" "vector< int >::size_type""'");
  } 
  arg2 = static_cast< vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_assign" "', argument " "3"" of type '" "vector< int >::value_type""'");
  } 
  temp3 = static_cast< vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type arg2 ;
  vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_resize" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_resize" "', argument " "2"" of type '" "vector< int >::size_type""'");
  } 
  arg2 = static_cast< vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_resize" "', argument " "3"" of type '" "vector< int >::value_type""'");
  } 
  temp3 = static_cast< vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::resize(vector< int >::size_type)\n"
    "    vector< int >::resize(vector< int >::size_type,vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::iterator arg2 ;
  vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vector_int_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_insert" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_insert" "', argument " "3"" of type '" "vector< int >::value_type""'");
  } 
  temp3 = static_cast< vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::iterator arg2 ;
  vector< int >::size_type arg3 ;
  vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vector_int_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_insert" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_insert" "', argument " "3"" of type '" "vector< int >::size_type""'");
  } 
  arg3 = static_cast< vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_int_insert" "', argument " "4"" of type '" "vector< int >::value_type""'");
  } 
  temp4 = static_cast< vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_int_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vector_int_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vector< int >::insert(vector< int >::iterator,vector< int >::value_type const &)\n"
    "    vector< int >::insert(vector< int >::iterator,vector< int >::size_type,vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vector_int_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_reserve" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_reserve" "', argument " "2"" of type '" "vector< int >::size_type""'");
  } 
  arg2 = static_cast< vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  vector< int >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_capacity" "', argument " "1"" of type '" "vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  result = ((vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_int(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  vector< int > *arg1 = (vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_int" "', argument " "1"" of type '" "vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"parseEPOCH3", _wrap_parseEPOCH3, METH_VARARGS, NULL},
	 { (char *)"encodeEPOCH3", _wrap_encodeEPOCH3, METH_VARARGS, NULL},
	 { (char *)"EPOCHbreakdown", _wrap_EPOCHbreakdown, METH_VARARGS, NULL},
	 { (char *)"Kameleon__cxform", _wrap_Kameleon__cxform, METH_VARARGS, NULL},
	 { (char *)"Kameleon__cxRound", _wrap_Kameleon__cxRound, METH_VARARGS, NULL},
	 { (char *)"Kameleon__date2es", _wrap_Kameleon__date2es, METH_VARARGS, NULL},
	 { (char *)"Kameleon__gregorian_calendar_to_jd", _wrap_Kameleon__gregorian_calendar_to_jd, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"__sub__", _wrap___sub__, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"__lt__", _wrap___lt__, METH_VARARGS, NULL},
	 { (char *)"__gt__", _wrap___gt__, METH_VARARGS, NULL},
	 { (char *)"__ge__", _wrap___ge__, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SwigPyIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__swig__SwigPyIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__swig__SwigPyIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_SwigPyIterator___eq__(self, tuple); break;
    case Py_NE : result = _wrap_SwigPyIterator___ne__(self, tuple); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__swig__SwigPyIterator_methods[] = {
  { "value", (PyCFunction) _wrap_SwigPyIterator_value, METH_VARARGS, (char*) "" },
  { "incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS, (char*) "" },
  { "decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS, (char*) "" },
  { "distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS, (char*) "" },
  { "equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS, (char*) "" },
  { "copy", (PyCFunction) _wrap_SwigPyIterator_copy, METH_VARARGS, (char*) "" },
  { "next", (PyCFunction) _wrap_SwigPyIterator_next, METH_VARARGS, (char*) "" },
  { "__next__", (PyCFunction) _wrap_SwigPyIterator___next__, METH_VARARGS, (char*) "" },
  { "previous", (PyCFunction) _wrap_SwigPyIterator_previous, METH_VARARGS, (char*) "" },
  { "advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS, (char*) "" },
  { "__eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS, (char*) "" },
  { "__ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS, (char*) "" },
  { "__iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char*) "" },
  { "__isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS, (char*) "" },
  { "__add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS, (char*) "" },
  { "__sub__", (PyCFunction) _wrap_SwigPyIterator___sub__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__swig__SwigPyIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "SwigPyIterator",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SwigPyIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "swig::SwigPyIterator",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__swig__SwigPyIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) &swig::make_output_iterator_builtin, /* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_SwigPyIterator___next___closure, /* tp_iternext */
    SwigPyBuiltin__swig__SwigPyIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__swig__SwigPyIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___sub___closure, /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___iadd___closure, /* nb_inplace_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___isub___closure, /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__swig__SwigPyIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_FileReader)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__FileReader_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__FileReader_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__FileReader_methods[] = {
  { "open", (PyCFunction) _wrap_FileReader_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::FileReader::open(const std::string &filename, bool\n"
		"readonly=true)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:\n"
		"\n"
		"The CDF status of the open call. CDF_OK is the standard successful\n"
		"status. \n"
		"" },
  { "getVariable", (PyCFunction) _wrap_FileReader_getVariable, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"std::vector<float>* ccmc::FileReader::getVariable(long variableID,\n"
		"long startIndex, long count)=0 \n"
		"" },
  { "getVariableAtIndex", (PyCFunction) _wrap_FileReader_getVariableAtIndex, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"float ccmc::FileReader::getVariableAtIndex(long variable_id, long\n"
		"index)=0 \n"
		"" },
  { "getVariableInt", (PyCFunction) _wrap_FileReader_getVariableInt, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"std::vector<int>* ccmc::FileReader::getVariableInt(const std::string\n"
		"&variable)=0 \n"
		"" },
  { "getVariableIntAtIndex", (PyCFunction) _wrap_FileReader_getVariableIntAtIndex, METH_VARARGS, (char*) "\n"
		"virtual int ccmc::FileReader::getVariableIntAtIndex(const std::string\n"
		"&variable, long index)=0 \n"
		"" },
  { "getNumberOfGlobalAttributes", (PyCFunction) _wrap_FileReader_getNumberOfGlobalAttributes, METH_VARARGS, (char*) "virtual int ccmc::FileReader::getNumberOfGlobalAttributes()=0 " },
  { "getNumberOfVariables", (PyCFunction) _wrap_FileReader_getNumberOfVariables, METH_VARARGS, (char*) "virtual int ccmc::FileReader::getNumberOfVariables()=0 " },
  { "getNumberOfVariableAttributes", (PyCFunction) _wrap_FileReader_getNumberOfVariableAttributes, METH_VARARGS, (char*) "virtual int ccmc::FileReader::getNumberOfVariableAttributes()=0 " },
  { "getNumberOfRecords", (PyCFunction) _wrap_FileReader_getNumberOfRecords, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"long ccmc::FileReader::getNumberOfRecords(long variable_id)=0 \n"
		"" },
  { "getVariableID", (PyCFunction) _wrap_FileReader_getVariableID, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::FileReader::getVariableID(const std::string &variable)=0\n"
		"\n"
		"Returns the variable ID as a long. Using the variable ID wherever\n"
		"possible is significantly faster than the equivalent methods accepting\n"
		"the variable string. Status of the file operation. \n"
		"" },
  { "getVariableName", (PyCFunction) _wrap_FileReader_getVariableName, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"std::string ccmc::FileReader::getVariableName(long variable_id)=0 \n"
		"" },
  { "getGlobalAttribute", (PyCFunction) _wrap_FileReader_getGlobalAttribute, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"Attribute ccmc::FileReader::getGlobalAttribute(const std::string\n"
		"&attribute)=0 \n"
		"" },
  { "getGlobalAttributeName", (PyCFunction) _wrap_FileReader_getGlobalAttributeName, METH_VARARGS, (char*) "\n"
		"virtual std::string ccmc::FileReader::getGlobalAttributeName(long\n"
		"attribute_id)=0 \n"
		"" },
  { "getVariableAttributeName", (PyCFunction) _wrap_FileReader_getVariableAttributeName, METH_VARARGS, (char*) "\n"
		"virtual std::string ccmc::FileReader::getVariableAttributeName(long\n"
		"attribute_id)=0 \n"
		"" },
  { "getGlobalAttributeID", (PyCFunction) _wrap_FileReader_getGlobalAttributeID, METH_VARARGS, (char*) "\n"
		"virtual long ccmc::FileReader::getGlobalAttributeID(const std::string\n"
		"&attribute)=0 \n"
		"" },
  { "getVariableAttribute", (PyCFunction) _wrap_FileReader_getVariableAttribute, METH_VARARGS, (char*) "\n"
		"virtual Attribute ccmc::FileReader::getVariableAttribute(const\n"
		"std::string &variable, const std::string &attribute)=0 \n"
		"" },
  { "getVariableAttributeNames", (PyCFunction) _wrap_FileReader_getVariableAttributeNames, METH_VARARGS, (char*) "\n"
		"virtual std::vector<std::string>\n"
		"ccmc::FileReader::getVariableAttributeNames()=0 \n"
		"" },
  { "doesAttributeExist", (PyCFunction) _wrap_FileReader_doesAttributeExist, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"bool ccmc::FileReader::doesAttributeExist(const std::string\n"
		"&attribute)=0 \n"
		"" },
  { "doesVariableExist", (PyCFunction) _wrap_FileReader_doesVariableExist, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"bool ccmc::FileReader::doesVariableExist(const std::string\n"
		"&variable)=0 \n"
		"" },
  { "close", (PyCFunction) _wrap_FileReader_close, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::FileReader::close()\n"
		"\n"
		"Closes the currently selected file. Status of close operation. \n"
		"" },
  { "getCurrentFilename", (PyCFunction) _wrap_FileReader_getCurrentFilename, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"const std::string& ccmc::FileReader::getCurrentFilename()=0 \n"
		"" },
  { "initializeVariableIDs", (PyCFunction) _wrap_FileReader_initializeVariableIDs, METH_VARARGS, (char*) "virtual void ccmc::FileReader::initializeVariableIDs()=0 " },
  { "initializeVariableNames", (PyCFunction) _wrap_FileReader_initializeVariableNames, METH_VARARGS, (char*) "virtual void ccmc::FileReader::initializeVariableNames()=0 " },
  { "closeFile", (PyCFunction) _wrap_FileReader_closeFile, METH_VARARGS, (char*) "\n"
		"virtual long\n"
		"ccmc::FileReader::closeFile()=0 \n"
		"" },
  { "openFile", (PyCFunction) _wrap_FileReader_openFile, METH_VARARGS, (char*) "\n"
		"virtual long\n"
		"ccmc::FileReader::openFile(const std::string &filename, bool\n"
		"readonly)=0 \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__FileReader_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "FileReader",                             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_FileReader_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__FileReader_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__FileReader_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__FileReader_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__FileReader_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::FileReader",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__FileReader_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__FileReader_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__FileReader_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__FileReader_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__FileReader_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_GeneralFileReader)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__GeneralFileReader_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__GeneralFileReader_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__GeneralFileReader_methods[] = {
  { "open", (PyCFunction) _wrap_GeneralFileReader_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::GeneralFileReader::open(const std::string &filename) \n"
		"" },
  { "getVariable", (PyCFunction) _wrap_GeneralFileReader_getVariable, METH_VARARGS, (char*) "\n"
		"std::vector< float > * ccmc::GeneralFileReader::getVariable(long\n"
		"variableID, long startIndex, long count) \n"
		"" },
  { "getVariableAtIndex", (PyCFunction) _wrap_GeneralFileReader_getVariableAtIndex, METH_VARARGS, (char*) "\n"
		"float ccmc::GeneralFileReader::getVariableAtIndex(long variable_id,\n"
		"long index) \n"
		"" },
  { "getVariableInt", (PyCFunction) _wrap_GeneralFileReader_getVariableInt, METH_VARARGS, (char*) "\n"
		"std::vector< int > * ccmc::GeneralFileReader::getVariableInt(const\n"
		"std::string &variable) \n"
		"" },
  { "getVariableIntAtIndex", (PyCFunction) _wrap_GeneralFileReader_getVariableIntAtIndex, METH_VARARGS, (char*) "\n"
		"int ccmc::GeneralFileReader::getVariableIntAtIndex(const std::string\n"
		"&variable, long index) \n"
		"" },
  { "getNumberOfGlobalAttributes", (PyCFunction) _wrap_GeneralFileReader_getNumberOfGlobalAttributes, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::GeneralFileReader::getNumberOfGlobalAttributes() \n"
		"" },
  { "getNumberOfVariables", (PyCFunction) _wrap_GeneralFileReader_getNumberOfVariables, METH_VARARGS, (char*) "int ccmc::GeneralFileReader::getNumberOfVariables() " },
  { "getNumberOfVariableAttributes", (PyCFunction) _wrap_GeneralFileReader_getNumberOfVariableAttributes, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::GeneralFileReader::getNumberOfVariableAttributes() \n"
		"" },
  { "getNumberOfRecords", (PyCFunction) _wrap_GeneralFileReader_getNumberOfRecords, METH_VARARGS, (char*) "long ccmc::GeneralFileReader::getNumberOfRecords(long variable_id) " },
  { "getVariableID", (PyCFunction) _wrap_GeneralFileReader_getVariableID, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::GeneralFileReader::getVariableID(const std::string &variable) \n"
		"" },
  { "getVariableName", (PyCFunction) _wrap_GeneralFileReader_getVariableName, METH_VARARGS, (char*) "\n"
		"std::string ccmc::GeneralFileReader::getVariableName(long variable_id)\n"
		"\n"
		"" },
  { "getGlobalAttribute", (PyCFunction) _wrap_GeneralFileReader_getGlobalAttribute, METH_VARARGS, (char*) "\n"
		"Attribute ccmc::GeneralFileReader::getGlobalAttribute(const\n"
		"std::string &attribute) \n"
		"" },
  { "getGlobalAttributeName", (PyCFunction) _wrap_GeneralFileReader_getGlobalAttributeName, METH_VARARGS, (char*) "\n"
		"std::string ccmc::GeneralFileReader::getGlobalAttributeName(long\n"
		"attribute_id) \n"
		"" },
  { "getVariableAttributeName", (PyCFunction) _wrap_GeneralFileReader_getVariableAttributeName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::GeneralFileReader::getVariableAttributeName(long attribute_id)\n"
		"\n"
		"" },
  { "getVariableAttribute", (PyCFunction) _wrap_GeneralFileReader_getVariableAttribute, METH_VARARGS, (char*) "\n"
		"Attribute ccmc::GeneralFileReader::getVariableAttribute(const\n"
		"std::string &variable, const std::string &attribute) \n"
		"" },
  { "getVariableAttributeNames", (PyCFunction) _wrap_GeneralFileReader_getVariableAttributeNames, METH_VARARGS, (char*) "\n"
		"std::vector<\n"
		"std::string > ccmc::GeneralFileReader::getVariableAttributeNames() \n"
		"" },
  { "doesAttributeExist", (PyCFunction) _wrap_GeneralFileReader_doesAttributeExist, METH_VARARGS, (char*) "\n"
		"bool ccmc::GeneralFileReader::doesAttributeExist(const std::string\n"
		"&attribute) \n"
		"" },
  { "doesVariableExist", (PyCFunction) _wrap_GeneralFileReader_doesVariableExist, METH_VARARGS, (char*) "\n"
		"bool ccmc::GeneralFileReader::doesVariableExist(const std::string\n"
		"&variable) \n"
		"" },
  { "close", (PyCFunction) _wrap_GeneralFileReader_close, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::GeneralFileReader::close() \n"
		"" },
  { "getCurrentFilename", (PyCFunction) _wrap_GeneralFileReader_getCurrentFilename, METH_VARARGS, (char*) "const std::string & ccmc::GeneralFileReader::getCurrentFilename() " },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__GeneralFileReader_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GeneralFileReader",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_GeneralFileReader_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__GeneralFileReader_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__GeneralFileReader_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__GeneralFileReader_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__GeneralFileReader_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::GeneralFileReader",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__GeneralFileReader_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__GeneralFileReader_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__GeneralFileReader_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_GeneralFileReader,   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__GeneralFileReader_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__GeneralFileReader_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CDFFileReader)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__CDFFileReader_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__CDFFileReader_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__CDFFileReader_methods[] = {
  { "getVariable", (PyCFunction) _wrap_CDFFileReader_getVariable, METH_VARARGS, (char*) "\n"
		"std::vector<\n"
		"float > * ccmc::CDFFileReader::getVariable(long variableID, long\n"
		"startIndex, long count)\n"
		"\n"
		"Returns a pointer to a std::vector<float> containing the values of the\n"
		"selected variable in the range specified by the startIndex and count\n"
		"(the number of records to read) stored in the selected file. This\n"
		"allocates a new std::vector<float> pointer. Make sure you delete the\n"
		"contents when you done using it, or you will have a memory leak.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variableID:\n"
		"\n"
		"startIndex:\n"
		"\n"
		"count:\n"
		"\n"
		"std::vector<float> containing the values of the selected variable. \n"
		"" },
  { "getVariableAtIndex", (PyCFunction) _wrap_CDFFileReader_getVariableAtIndex, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::CDFFileReader::getVariableAtIndex(long variable_id, long index)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variableNum:\n"
		"\n"
		"index:  \n"
		"" },
  { "getVariableInt", (PyCFunction) _wrap_CDFFileReader_getVariableInt, METH_VARARGS, (char*) "\n"
		"std::vector< int > * ccmc::CDFFileReader::getVariableInt(const\n"
		"std::string &variable)\n"
		"\n"
		"This allocates a new std::vector<int> pointer. Make sure you delete\n"
		"the contents when you done using it, or you will have a memory leak.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"vector<int> containing the integer values of the variable \n"
		"" },
  { "getVariableIntAtIndex", (PyCFunction) _wrap_CDFFileReader_getVariableIntAtIndex, METH_VARARGS, (char*) "\n"
		"int ccmc::CDFFileReader::getVariableIntAtIndex(const std::string\n"
		"&variable, long index)\n"
		"\n"
		"Returns a value in the flat array of the variable and index requested.\n"
		"\n"
		"Use this method on variables that have a type of int\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  The variable in the file\n"
		"\n"
		"index:  The index in the variable's array in the file\n"
		"\n"
		"int of the value in the array. \n"
		"" },
  { "getNumberOfGlobalAttributes", (PyCFunction) _wrap_CDFFileReader_getNumberOfGlobalAttributes, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::CDFFileReader::getNumberOfGlobalAttributes()\n"
		"\n"
		"TODO Retrieves the number of global attributes in the selected file.\n"
		"This is useful for iterating over all available global attributes. The\n"
		"number of global attributes stored in the selected file. \n"
		"" },
  { "getNumberOfVariables", (PyCFunction) _wrap_CDFFileReader_getNumberOfVariables, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::CDFFileReader::getNumberOfVariables() \n"
		"" },
  { "getNumberOfVariableAttributes", (PyCFunction) _wrap_CDFFileReader_getNumberOfVariableAttributes, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::CDFFileReader::getNumberOfVariableAttributes()\n"
		"\n"
		"Gets the number of variable attributes. The number of variable\n"
		"attributes in the opened file. \n"
		"" },
  { "getNumberOfRecords", (PyCFunction) _wrap_CDFFileReader_getNumberOfRecords, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::CDFFileReader::getNumberOfRecords(long variable_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  \n"
		"" },
  { "getVariableID", (PyCFunction) _wrap_CDFFileReader_getVariableID, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::CDFFileReader::getVariableID(const std::string &variable)\n"
		"\n"
		"Returns the variable ID as a long. Using the variable ID wherever\n"
		"possible is significantly faster than the equivalent methods accepting\n"
		"the variable string. Status of the file operation. \n"
		"" },
  { "getVariableName", (PyCFunction) _wrap_CDFFileReader_getVariableName, METH_VARARGS, (char*) "\n"
		"std::string ccmc::CDFFileReader::getVariableName(long variable_id)\n"
		"\n"
		"Returns the string representation of the variable referred to by\n"
		"variable_id String representation of the variable. \n"
		"" },
  { "getGlobalAttribute", (PyCFunction) _wrap_CDFFileReader_getGlobalAttribute, METH_VARARGS, (char*) "\n"
		"Attribute ccmc::CDFFileReader::getGlobalAttribute(const std::string\n"
		"&attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute:  \n"
		"" },
  { "getGlobalAttributeName", (PyCFunction) _wrap_CDFFileReader_getGlobalAttributeName, METH_VARARGS, (char*) "\n"
		"std::string ccmc::CDFFileReader::getGlobalAttributeName(long\n"
		"attribute_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute_id:  \n"
		"" },
  { "getVariableAttributeName", (PyCFunction) _wrap_CDFFileReader_getVariableAttributeName, METH_VARARGS, (char*) "\n"
		"std::string ccmc::CDFFileReader::getVariableAttributeName(long\n"
		"attribute_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute_id:\n"
		"\n"
		"String representing the name of the attribute specified by\n"
		"attribute_id \n"
		"" },
  { "getGlobalAttributeID", (PyCFunction) _wrap_CDFFileReader_getGlobalAttributeID, METH_VARARGS, (char*) "\n"
		"long ccmc::CDFFileReader::getGlobalAttributeID(const std::string\n"
		"&attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute:  \n"
		"" },
  { "getVariableAttribute", (PyCFunction) _wrap_CDFFileReader_getVariableAttribute, METH_VARARGS, (char*) "\n"
		"Attribute ccmc::CDFFileReader::getVariableAttribute(const std::string\n"
		"&variable, const std::string &attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"vattribute:  \n"
		"" },
  { "getVariableAttributeNames", (PyCFunction) _wrap_CDFFileReader_getVariableAttributeNames, METH_VARARGS, (char*) "\n"
		"std::vector< std::string >\n"
		"ccmc::CDFFileReader::getVariableAttributeNames() \n"
		"" },
  { "doesAttributeExist", (PyCFunction) _wrap_CDFFileReader_doesAttributeExist, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::CDFFileReader::doesAttributeExist(long attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute:  \n"
		"" },
  { "doesVariableExist", (PyCFunction) _wrap_CDFFileReader_doesVariableExist, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::CDFFileReader::doesVariableExist(long variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getCurrentFilename", (PyCFunction) _wrap_CDFFileReader_getCurrentFilename, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::string & ccmc::CDFFileReader::getCurrentFilename()\n"
		"\n"
		"Returns the current filename. The current filename. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__CDFFileReader_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "CDFFileReader",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_CDFFileReader_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__CDFFileReader_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__CDFFileReader_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__CDFFileReader_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__CDFFileReader_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::CDFFileReader",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__CDFFileReader_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__CDFFileReader_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__CDFFileReader_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_CDFFileReader,       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__CDFFileReader_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__CDFFileReader_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Position)
static SwigPyGetSet Position_c0_getset = { _wrap_Position_c0_get, _wrap_Position_c0_set };
static SwigPyGetSet Position_c1_getset = { _wrap_Position_c1_get, _wrap_Position_c1_set };
static SwigPyGetSet Position_c2_getset = { _wrap_Position_c2_get, _wrap_Position_c2_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Position_getset[] = {
    { (char*) "c0", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Position.c0", (void*) &Position_c0_getset }
,
    { (char*) "c1", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Position.c1", (void*) &Position_c1_getset }
,
    { (char*) "c2", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Position.c2", (void*) &Position_c2_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Position_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Position_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Position_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Position",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Position_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Position_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Position_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Position_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Position_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Position",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Position_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Position_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Position_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Position,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Position_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Position_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Kameleon)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Kameleon_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Kameleon_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Kameleon_methods[] = {
  { "close", (PyCFunction) _wrap_Kameleon_close, METH_VARARGS, (char*) "\n"
		"long Kameleon::close()\n"
		"\n"
		"Closes the currently opened file. \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_Kameleon_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator * Kameleon::createNewInterpolator()\n"
		"\n"
		"Returns a new interpolater that maintains state information\n"
		"independent of other interpolators. This can be used to parallelize\n"
		"the interpolations. A new interpolator. \n"
		"" },
  { "doesAttributeExist", (PyCFunction) _wrap_Kameleon_doesAttributeExist, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::doesAttributeExist(const std::string &attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute:  \n"
		"" },
  { "doesVariableExist", (PyCFunction) _wrap_Kameleon_doesVariableExist, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::doesVariableExist(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getConversionFactorToSI", (PyCFunction) _wrap_Kameleon_getConversionFactorToSI, METH_VARARGS, (char*) "\n"
		"float\n"
		"Kameleon::getConversionFactorToSI(const std::string &variable)\n"
		"\n"
		"Currently not implemented.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getCurrentFilename", (PyCFunction) _wrap_Kameleon_getCurrentFilename, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::string & Kameleon::getCurrentFilename() \n"
		"" },
  { "getCurrentTime", (PyCFunction) _wrap_Kameleon_getCurrentTime, METH_VARARGS, (char*) "\n"
		"Time\n"
		"Kameleon::getCurrentTime()\n"
		"\n"
		"Calculates the current time based on the start time and the elapsed\n"
		"time. Formatted string of the current time. This is currently\n"
		"different for different models. If the current time cannot be\n"
		"calculated, \"TIME_UNAVAILABLE\" is returned. \n"
		"" },
  { "getGlobalAttribute", (PyCFunction) _wrap_Kameleon_getGlobalAttribute, METH_VARARGS, (char*) "\n"
		"Attribute\n"
		"Kameleon::getGlobalAttribute(const std::string &attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute:  \n"
		"" },
  { "getGlobalAttributeName", (PyCFunction) _wrap_Kameleon_getGlobalAttributeName, METH_VARARGS, (char*) "\n"
		"std::string Kameleon::getGlobalAttributeName(long attribute_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"attribute_id:  \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_Kameleon_getLoadedVariables, METH_VARARGS, (char*) "std::vector< std::string > Kameleon::getLoadedVariables() " },
  { "getMissingValue", (PyCFunction) _wrap_Kameleon_getMissingValue, METH_VARARGS, (char*) "\n"
		"float\n"
		"Kameleon::getMissingValue() \n"
		"" },
  { "getModelName", (PyCFunction) _wrap_Kameleon_getModelName, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::string & Kameleon::getModelName()\n"
		"\n"
		"Returns the model name of the opened file. The model name. \n"
		"" },
  { "getNativeUnit", (PyCFunction) _wrap_Kameleon_getNativeUnit, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"Kameleon::getNativeUnit(const std::string &variable)\n"
		"\n"
		"Returns the units of the variable specified. The units may differ from\n"
		"the units in the original data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"String representation of the units \n"
		"" },
  { "getNumberOfGlobalAttributes", (PyCFunction) _wrap_Kameleon_getNumberOfGlobalAttributes, METH_VARARGS, (char*) "int Kameleon::getNumberOfGlobalAttributes() " },
  { "getNumberOfVariableAttributes", (PyCFunction) _wrap_Kameleon_getNumberOfVariableAttributes, METH_VARARGS, (char*) "int Kameleon::getNumberOfVariableAttributes() " },
  { "getNumberOfVariables", (PyCFunction) _wrap_Kameleon_getNumberOfVariables, METH_VARARGS, (char*) "\n"
		"int\n"
		"Kameleon::getNumberOfVariables() \n"
		"" },
  { "getSIUnit", (PyCFunction) _wrap_Kameleon_getSIUnit, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"Kameleon::getSIUnit(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getVariable", (PyCFunction) _wrap_Kameleon_getVariable, METH_VARARGS, (char*) "\n"
		"std::vector<\n"
		"float > * Kameleon::getVariable(const std::string &variable) \n"
		"" },
  { "getVariableAttribute", (PyCFunction) _wrap_Kameleon_getVariableAttribute, METH_VARARGS, (char*) "\n"
		"Attribute Kameleon::getVariableAttribute(const std::string &variable,\n"
		"const std::string &attribute)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"attribute:  \n"
		"" },
  { "getVariableAttributeName", (PyCFunction) _wrap_Kameleon_getVariableAttributeName, METH_VARARGS, (char*) "std::string Kameleon::getVariableAttributeName(long attribute_id) " },
  { "getVariableFromMap", (PyCFunction) _wrap_Kameleon_getVariableFromMap, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< float > *const Kameleon::getVariableFromMap(const\n"
		"std::string &variable)\n"
		"\n"
		"Returns a pointer to the variable data stored in a map. This method\n"
		"works for variables of type float. This cannot and should not be\n"
		"modified or deleted. Use loadVariable and unloadVariable to manange\n"
		"the map.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getVariableID", (PyCFunction) _wrap_Kameleon_getVariableID, METH_VARARGS, (char*) "\n"
		"long\n"
		"Kameleon::getVariableID(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getVariableInt", (PyCFunction) _wrap_Kameleon_getVariableInt, METH_VARARGS, (char*) "\n"
		"std::vector<\n"
		"int > * Kameleon::getVariableInt(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getVariableIntFromMap", (PyCFunction) _wrap_Kameleon_getVariableIntFromMap, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< int > *const Kameleon::getVariableIntFromMap(const\n"
		"std::string &variable)\n"
		"\n"
		"Returns a pointer to the variable data stored in a map. This method\n"
		"works for variables of type int. This cannot and should not be\n"
		"modified or deleted. Use loadVariable and unloadVariable to manange\n"
		"the map.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getVariableName", (PyCFunction) _wrap_Kameleon_getVariableName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"Kameleon::getVariableName(long variable_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  \n"
		"" },
  { "getVisUnit", (PyCFunction) _wrap_Kameleon_getVisUnit, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"Kameleon::getVisUnit(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "loadVariable", (PyCFunction) _wrap_Kameleon_loadVariable, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::loadVariable(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "loadVectorVariable", (PyCFunction) _wrap_Kameleon_loadVectorVariable, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::loadVectorVariable(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "open", (PyCFunction) _wrap_Kameleon_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"Kameleon::open(const std::string &filename)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "setMissingValue", (PyCFunction) _wrap_Kameleon_setMissingValue, METH_VARARGS, (char*) "\n"
		"void\n"
		"Kameleon::setMissingValue(float missingValue) \n"
		"" },
  { "unloadVariable", (PyCFunction) _wrap_Kameleon_unloadVariable, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::unloadVariable(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "unloadVectorVariable", (PyCFunction) _wrap_Kameleon_unloadVectorVariable, METH_VARARGS, (char*) "\n"
		"bool\n"
		"Kameleon::unloadVectorVariable(const std::string &variable)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getProgress", (PyCFunction) _wrap_Kameleon_getProgress, METH_VARARGS, (char*) "\n"
		"int\n"
		"Kameleon::getProgress() \n"
		"" },
  { "_cxform", (PyCFunction) _wrap_Kameleon__cxform, METH_STATIC|METH_VARARGS, "" },
  { "_cxRound", (PyCFunction) _wrap_Kameleon__cxRound, METH_STATIC|METH_VARARGS, "" },
  { "_date2es", (PyCFunction) _wrap_Kameleon__date2es, METH_STATIC|METH_VARARGS, "" },
  { "_gregorian_calendar_to_jd", (PyCFunction) _wrap_Kameleon__gregorian_calendar_to_jd, METH_STATIC|METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Kameleon_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Kameleon",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Kameleon_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Kameleon_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Kameleon_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Kameleon_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Kameleon_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Kameleon",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Kameleon_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Kameleon_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Kameleon_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Kameleon,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Kameleon_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Kameleon_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Interpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Interpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Interpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Interpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_Interpolator_interpolate, METH_VARARGS, (char*) "\n"
		"virtual float\n"
		"ccmc::Interpolator::interpolate(const long &variable_id, const float\n"
		"&c0, const float &c1, const float &c2, float &dc0, float &dc1, float\n"
		"&dc2)=0 \n"
		"" },
  { "getConversionFactor", (PyCFunction) _wrap_Interpolator_getConversionFactor, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Interpolator::getConversionFactor(const long &variable_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  \n"
		"" },
  { "getModelName", (PyCFunction) _wrap_Interpolator_getModelName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Interpolator::getModelName() \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Interpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Interpolator",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Interpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Interpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Interpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Interpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Interpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Interpolator",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Interpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Interpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Interpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Interpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Interpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_KameleonInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__KameleonInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__KameleonInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__KameleonInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_KameleonInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::KameleonInterpolator::interpolate(const long &variable_id, const\n"
		"float &c0, const float &c1, const float &c2, float &dc0, float &dc1,\n"
		"float &dc2)\n"
		"\n"
		"A variable_id won't work well, since derived variables can be\n"
		"requested, which do not exist in the data.\n"
		"\n"
		"OpenGGCM and BATSRUS: c0,c1,c2 maps to x,y,z, respectively. ENLIL and\n"
		"MAS: c0,c1,c2 maps to r,theta(latitude), phi(longitude), respectively\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"c0:\n"
		"\n"
		"c1:\n"
		"\n"
		"c2:\n"
		"\n"
		"dc0:\n"
		"\n"
		"dc1:\n"
		"\n"
		"dc2:  \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__KameleonInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "KameleonInterpolator",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_KameleonInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__KameleonInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__KameleonInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__KameleonInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__KameleonInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::KameleonInterpolator",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__KameleonInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__KameleonInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__KameleonInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_KameleonInterpolator, /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__KameleonInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__KameleonInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Tracer)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Tracer_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Tracer_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Tracer_methods[] = {
  { "setInnerBoundary", (PyCFunction) _wrap_Tracer_setInnerBoundary, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setInnerBoundary(float r_end)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"r_end:  \n"
		"" },
  { "setMaxIterations", (PyCFunction) _wrap_Tracer_setMaxIterations, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setMaxIterations(int stepMax)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"stepMax:  \n"
		"" },
  { "setDn", (PyCFunction) _wrap_Tracer_setDn, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setDn(float dn)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dn:  \n"
		"" },
  { "setTilt", (PyCFunction) _wrap_Tracer_setTilt, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setTilt(float tilt)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"tilt:  \n"
		"" },
  { "setMissing", (PyCFunction) _wrap_Tracer_setMissing, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setMissing(float missing)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"missing:  \n"
		"" },
  { "setMaxArcLength", (PyCFunction) _wrap_Tracer_setMaxArcLength, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setMaxArcLength(float maxArcLength)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"maxArcLength:  \n"
		"" },
  { "bidirectionalTrace", (PyCFunction) _wrap_Tracer_bidirectionalTrace, METH_VARARGS, (char*) "\n"
		"Fieldline\n"
		"ccmc::Tracer::bidirectionalTrace(const std::string &variable, const\n"
		"float &startComponent1, const float &startComponent2, const float\n"
		"&startComponent3)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"startComponent1:\n"
		"\n"
		"startComponent2:\n"
		"\n"
		"startComponent3:  \n"
		"" },
  { "bidirectionalTraceWithDipole", (PyCFunction) _wrap_Tracer_bidirectionalTraceWithDipole, METH_VARARGS, (char*) "\n"
		"Fieldline ccmc::Tracer::bidirectionalTraceWithDipole(const std::string\n"
		"&variable, const float &startComponent1, const float &startComponent2,\n"
		"const float &startComponent3)\n"
		"\n"
		"Opens a CCMC generated CDF file and initializes the model name\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  The filename of the cdf file to open. Closes the opened CDF\n"
		"file Loads the variable, including all components of the variable,\n"
		"into memory. For example, if variable is \"bx\", three variables will\n"
		"be loaded: \"bx\", \"by\", and \"bz\"\n"
		"\n"
		"variable:  TODO: finish documentation\n"
		"\n"
		"variable:\n"
		"\n"
		"startComponent1:\n"
		"\n"
		"startComponent2:\n"
		"\n"
		"startComponent3:  \n"
		"" },
  { "unidirectionalTrace", (PyCFunction) _wrap_Tracer_unidirectionalTrace, METH_VARARGS, (char*) "\n"
		"Fieldline\n"
		"ccmc::Tracer::unidirectionalTrace(const std::string &variable, const\n"
		"float &startComponent1, const float &startComponent2, const float\n"
		"&startComponent3, const Direction &dir=FOWARD)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"startComponent1:\n"
		"\n"
		"startComponent2:\n"
		"\n"
		"startComponent3:\n"
		"\n"
		"dir:  \n"
		"" },
  { "unidirectionalTraceWithDipole", (PyCFunction) _wrap_Tracer_unidirectionalTraceWithDipole, METH_VARARGS, (char*) "\n"
		"Fieldline ccmc::Tracer::unidirectionalTraceWithDipole(const\n"
		"std::string &variable, const float &startComponent1, const float\n"
		"&startComponent2, const float &startComponent3, const Direction\n"
		"&dir=FOWARD)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"startComponent1:\n"
		"\n"
		"startComponent2:\n"
		"\n"
		"startComponent3:\n"
		"\n"
		"dir:  \n"
		"" },
  { "findLastClosed", (PyCFunction) _wrap_Tracer_findLastClosed, METH_VARARGS, (char*) "\n"
		"Fieldline\n"
		"ccmc::Tracer::findLastClosed(Point3f position, int stepMax)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"position:\n"
		"\n"
		"stepMax:  \n"
		"" },
  { "getLastClosedFieldlines", (PyCFunction) _wrap_Tracer_getLastClosedFieldlines, METH_VARARGS, (char*) "\n"
		"vector<\n"
		"Fieldline > ccmc::Tracer::getLastClosedFieldlines(int\n"
		"numberOfFieldlines, int stepMax, int\n"
		"numberOfPointsPerReducedFieldline)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"numberOfFieldlines:\n"
		"\n"
		"stepMax:\n"
		"\n"
		"numberOfPointsPerReducedFieldline:\n"
		"\n"
		"add the first point all the time\n"
		"\n"
		"always add the last point too, since i was reduced by one \n"
		"" },
  { "isClosed", (PyCFunction) _wrap_Tracer_isClosed, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::Tracer::isClosed(Fieldline &fieldline)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"fieldline:  \n"
		"" },
  { "setUseMaxArcLength", (PyCFunction) _wrap_Tracer_setUseMaxArcLength, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setUseMaxArcLength(bool useMaxArcLength)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"useMaxArcLength:  \n"
		"" },
  { "getVector", (PyCFunction) _wrap_Tracer_getVector, METH_VARARGS, (char*) "\n"
		"Point3f\n"
		"ccmc::Tracer::getVector(const std::string &variable, const Point3f\n"
		"&position, float &dComponent1, float &dComponent2, float &dComponent3,\n"
		"const Interpolator *interpolator)\n"
		"\n"
		"check to see if iterations are greater than or equal to max I should\n"
		"have changed the name but it would have been too long TODO: finish\n"
		"documentation TODO: return missing value if variable not found TODO:\n"
		"use a map instead of an if/else statement to check for the variable\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"position:\n"
		"\n"
		"dComponent1:\n"
		"\n"
		"dComponent2:\n"
		"\n"
		"dComponent3:\n"
		"\n"
		"interpolator:  \n"
		"" },
  { "setRegionOfInterest", (PyCFunction) _wrap_Tracer_setRegionOfInterest, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setRegionOfInterest(Point3f min, Point3f max)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"min:\n"
		"\n"
		"max:  \n"
		"" },
  { "setUseRegionOfInterest", (PyCFunction) _wrap_Tracer_setUseRegionOfInterest, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Tracer::setUseRegionOfInterest(bool useROI)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"useROI:  \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Tracer_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Tracer",                                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Tracer_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Tracer_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Tracer_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Tracer_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Tracer_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Tracer",                           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Tracer_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Tracer_methods,      /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Tracer_getset,       /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Tracer,              /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Tracer_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Tracer_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Fieldline)
static SwigPyGetSet Fieldline_maxcount_getset = { _wrap_Fieldline_maxcount_get, _wrap_Fieldline_maxcount_set };
static SwigPyGetSet Fieldline_mincount_getset = { _wrap_Fieldline_mincount_get, _wrap_Fieldline_mincount_set };
static SwigPyGetSet Fieldline_maxima_getset = { _wrap_Fieldline_maxima_get, _wrap_Fieldline_maxima_set };
static SwigPyGetSet Fieldline_minima_getset = { _wrap_Fieldline_minima_get, _wrap_Fieldline_minima_set };
static SwigPyGetSet Fieldline_GlobMaxIndex_getset = { _wrap_Fieldline_GlobMaxIndex_get, _wrap_Fieldline_GlobMaxIndex_set };
static SwigPyGetSet Fieldline_GlobMinIndex_getset = { _wrap_Fieldline_GlobMinIndex_get, _wrap_Fieldline_GlobMinIndex_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Fieldline_getset[] = {
    { (char*) "maxcount", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.maxcount", (void*) &Fieldline_maxcount_getset }
,
    { (char*) "mincount", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.mincount", (void*) &Fieldline_mincount_getset }
,
    { (char*) "maxima", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.maxima", (void*) &Fieldline_maxima_getset }
,
    { (char*) "minima", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.minima", (void*) &Fieldline_minima_getset }
,
    { (char*) "GlobMaxIndex", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.GlobMaxIndex", (void*) &Fieldline_GlobMaxIndex_getset }
,
    { (char*) "GlobMinIndex", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Fieldline.GlobMinIndex", (void*) &Fieldline_GlobMinIndex_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Fieldline_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Fieldline_methods[] = {
  { "insertPointData", (PyCFunction) _wrap_Fieldline_insertPointData, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::insertPointData(const Point3f &p, const float &d)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"p:\n"
		"\n"
		"d:  \n"
		"" },
  { "removePoint", (PyCFunction) _wrap_Fieldline_removePoint, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::removePoint(int index)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  \n"
		"" },
  { "reverseOrder", (PyCFunction) _wrap_Fieldline_reverseOrder, METH_VARARGS, (char*) "\n"
		"Fieldline\n"
		"ccmc::Fieldline::reverseOrder()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "reverseOrderInPlace", (PyCFunction) _wrap_Fieldline_reverseOrderInPlace, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::reverseOrderInPlace()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "getPositions", (PyCFunction) _wrap_Fieldline_getPositions, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< Point3f > & ccmc::Fieldline::getPositions()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "getData", (PyCFunction) _wrap_Fieldline_getData, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Fieldline::getData(int i)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  \n"
		"" },
  { "size", (PyCFunction) _wrap_Fieldline_size, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::Fieldline::size()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "getPosition", (PyCFunction) _wrap_Fieldline_getPosition, METH_VARARGS, (char*) "\n"
		"const Point3f &\n"
		"ccmc::Fieldline::getPosition(int i)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  \n"
		"" },
  { "getStartPoint", (PyCFunction) _wrap_Fieldline_getStartPoint, METH_VARARGS, (char*) "\n"
		"Point3f\n"
		"ccmc::Fieldline::getStartPoint()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "reserve", (PyCFunction) _wrap_Fieldline_reserve, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::reserve(int size)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"size:  \n"
		"" },
  { "setStartPoint", (PyCFunction) _wrap_Fieldline_setStartPoint, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::setStartPoint(Point3f p)\n"
		"\n"
		"TODO: finish documentation\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"startPoint:  \n"
		"" },
  { "setVariable", (PyCFunction) _wrap_Fieldline_setVariable, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Fieldline::setVariable(std::string variable) \n"
		"" },
  { "getVariable", (PyCFunction) _wrap_Fieldline_getVariable, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::string & ccmc::Fieldline::getVariable() \n"
		"" },
  { "getDs", (PyCFunction) _wrap_Fieldline_getDs, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > & ccmc::Fieldline::getDs()\n"
		"\n"
		"Calculate the forward difference elements for a field line with\n"
		"ordered positions. Output has length fieldline.size()-1 TODO: Add\n"
		"backward and higher-order differencing \n"
		"" },
  { "getElements", (PyCFunction) _wrap_Fieldline_getElements, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< Point3f > & ccmc::Fieldline::getElements() \n"
		"" },
  { "getElement", (PyCFunction) _wrap_Fieldline_getElement, METH_VARARGS, (char*) "\n"
		"const Point3f &\n"
		"ccmc::Fieldline::getElement(int i) \n"
		"" },
  { "integrate", (PyCFunction) _wrap_Fieldline_integrate, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > & ccmc::Fieldline::integrate()\n"
		"\n"
		"Calculate the integral of ds*values over the length of the field line\n"
		"\n"
		"TODO: Change integration so that it multiplies the element lengths by\n"
		"the average of the data on either side of the element \n"
		"" },
  { "derivative", (PyCFunction) _wrap_Fieldline_derivative, METH_VARARGS, (char*) "" },
  { "measure", (PyCFunction) _wrap_Fieldline_measure, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > & ccmc::Fieldline::measure()\n"
		"\n"
		"Measure the length of the field line up to point i \n"
		"" },
  { "getLength", (PyCFunction) _wrap_Fieldline_getLength, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Fieldline::getLength(int i)\n"
		"\n"
		"Get the length up to position i \n"
		"" },
  { "getIntegral", (PyCFunction) _wrap_Fieldline_getIntegral, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Fieldline::getIntegral(int i)\n"
		"\n"
		"Get the integral up to position i \n"
		"" },
  { "interpolate", (PyCFunction) _wrap_Fieldline_interpolate, METH_VARARGS, (char*) "\n"
		"Fieldline\n"
		"ccmc::Fieldline::interpolate(int option, int Npoints) \n"
		"" },
  { "getNearest", (PyCFunction) _wrap_Fieldline_getNearest, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< int > & ccmc::Fieldline::getNearest() \n"
		"" },
  { "getTlocal", (PyCFunction) _wrap_Fieldline_getTlocal, METH_VARARGS, (char*) "" },
  { "minmax", (PyCFunction) _wrap_Fieldline_minmax, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Fieldline_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Fieldline",                              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Fieldline_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Fieldline_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Fieldline_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Fieldline_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Fieldline_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Fieldline",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Fieldline_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Fieldline_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Fieldline_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Fieldline,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Fieldline_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Fieldline_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Point3f)
static SwigPyGetSet Point3f_component1_getset = { _wrap_Point3f_component1_get, _wrap_Point3f_component1_set };
static SwigPyGetSet Point3f_component2_getset = { _wrap_Point3f_component2_get, _wrap_Point3f_component2_set };
static SwigPyGetSet Point3f_component3_getset = { _wrap_Point3f_component3_get, _wrap_Point3f_component3_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Point3f_getset[] = {
    { (char*) "component1", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Point3f.component1", (void*) &Point3f_component1_getset }
,
    { (char*) "component2", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Point3f.component2", (void*) &Point3f_component2_getset }
,
    { (char*) "component3", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"ccmc::Point3f.component3", (void*) &Point3f_component3_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Point3f_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Point3f_methods[] = {
  { "normalize", (PyCFunction) _wrap_Point3f_normalize, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Point3f::normalize()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "toString", (PyCFunction) _wrap_Point3f_toString, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Point3f::toString() const\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "magnitude", (PyCFunction) _wrap_Point3f_magnitude, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Point3f::magnitude()\n"
		"\n"
		"Computes the magnitude of the cartesian vector \n"
		"" },
  { "distance", (PyCFunction) _wrap_Point3f_distance, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Point3f::distance(const Point3f &p) const\n"
		"\n"
		"compute the distance between this point, and Point p TODO: finish\n"
		"documentation \n"
		"" },
  { "__add__", (PyCFunction) _wrap_Point3f___add__, METH_VARARGS, (char*) "" },
  { "__sub__", (PyCFunction) _wrap_Point3f___sub__, METH_VARARGS, (char*) "" },
  { "__mul__", (PyCFunction) _wrap_Point3f___mul__, METH_VARARGS, (char*) "" },
  { "setCoordinates", (PyCFunction) _wrap_Point3f_setCoordinates, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Point3f::setCoordinates(Coordinates c)\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "getCoordinates", (PyCFunction) _wrap_Point3f_getCoordinates, METH_VARARGS, (char*) "\n"
		"Point3f::Coordinates ccmc::Point3f::getCoordinates()\n"
		"\n"
		"TODO: finish documentation \n"
		"" },
  { "getCartesian", (PyCFunction) _wrap_Point3f_getCartesian, METH_VARARGS, (char*) "\n"
		"Point3f\n"
		"ccmc::Point3f::getCartesian() \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Point3f_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Point3f",                                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Point3f_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Point3f_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Point3f_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Point3f_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Point3f_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Point3f",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Point3f_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Point3f_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Point3f_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Point3f,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_Point3f___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_Point3f___sub___closure, /* nb_subtract */
    (binaryfunc) (binaryfunc) _wrap_Point3f___mul___closure, /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Point3f_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Point3f_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Attribute)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Attribute_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Attribute_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Attribute_methods[] = {
  { "getAttributeName", (PyCFunction) _wrap_Attribute_getAttributeName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Attribute::getAttributeName()\n"
		"\n"
		"Returns the attribute's name as a std::string object. The attribute's\n"
		"name \n"
		"" },
  { "setAttributeName", (PyCFunction) _wrap_Attribute_setAttributeName, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Attribute::setAttributeName(std::string attributeName)\n"
		"\n"
		"Sets the attribute name\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"name:  The attribute name requested. \n"
		"" },
  { "setAttributeValue", (PyCFunction) _wrap_Attribute_setAttributeValue, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Attribute::setAttributeValue(float &value)\n"
		"\n"
		"Copies the contents of value and stores them.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"value:  the new attribute value \n"
		"" },
  { "getAttributeType", (PyCFunction) _wrap_Attribute_getAttributeType, METH_VARARGS, (char*) "\n"
		"Attribute::AttributeType ccmc::Attribute::getAttributeType()\n"
		"\n"
		"AttributeType of the Attribute object \n"
		"" },
  { "getAttributeFloat", (PyCFunction) _wrap_Attribute_getAttributeFloat, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Attribute::getAttributeFloat()\n"
		"\n"
		"Returns the attribute value as a float, if applicable. The float value\n"
		"of the attribute. The value returned will be 0.f if the AttributeType\n"
		"of the Attribute object is not Attribute::FLOAT \n"
		"" },
  { "getAttributeString", (PyCFunction) _wrap_Attribute_getAttributeString, METH_VARARGS, (char*) "\n"
		"std::string ccmc::Attribute::getAttributeString()\n"
		"\n"
		"Returns the string representation of the attribute, if applicable. The\n"
		"string value of the attribute. This value will be an empty string if\n"
		"the AttributeType of the Attribute object is not Attribute::STRING \n"
		"" },
  { "getAttributeInt", (PyCFunction) _wrap_Attribute_getAttributeInt, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::Attribute::getAttributeInt()\n"
		"\n"
		"Returns the attribute value as an int, if applicable. The int value of\n"
		"the attribute. The value returned will be 0 if the AttributeType of\n"
		"the Attribute object is not Attribute::FLOAT \n"
		"" },
  { "toString", (PyCFunction) _wrap_Attribute_toString, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Attribute::toString() const \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Attribute_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Attribute",                              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Attribute_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Attribute_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Attribute_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Attribute_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Attribute_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Attribute",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Attribute_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Attribute_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Attribute_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Attribute,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Attribute_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Attribute_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Model)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Model_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Model_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Model_methods[] = {
  { "open", (PyCFunction) _wrap_Model_open, METH_VARARGS, (char*) "\n"
		"virtual long\n"
		"ccmc::Model::open(const std::string &filename)=0\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "setModelName", (PyCFunction) _wrap_Model_setModelName, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Model::setModelName(std::string modelName)\n"
		"\n"
		"Sets the model name to modelName.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"modelName:  \n"
		"" },
  { "getModelName", (PyCFunction) _wrap_Model_getModelName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Model::getModelName()\n"
		"\n"
		"Returns the modelName of the currently selected file. \n"
		"" },
  { "loadVariable", (PyCFunction) _wrap_Model_loadVariable, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::Model::loadVariable(const std::string &variable)\n"
		"\n"
		"Load a variable into memory.\n"
		"\n"
		"Use this method when the variable to load is of type float\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  Variable to load into memory.\n"
		"\n"
		"status of the operation \n"
		"" },
  { "unloadVariable", (PyCFunction) _wrap_Model_unloadVariable, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::Model::unloadVariable(const std::string &variable)\n"
		"\n"
		"Unload a variable from memory. This will return FileReader::OK if the\n"
		"variable is removed from memory, and\n"
		"FileReader::VARIABLE_NOT_IN_MEMORY if the variable was not already in\n"
		"memory.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  Variable to unload from memory.\n"
		"\n"
		"status of the operation \n"
		"" },
  { "loadVariableInt", (PyCFunction) _wrap_Model_loadVariableInt, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::Model::loadVariableInt(const std::string &variable)\n"
		"\n"
		"Loads a variable into memory.\n"
		"\n"
		"Use this method when the variable to load is of type int\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:\n"
		"\n"
		"status of the operation \n"
		"" },
  { "getVariableFromMapRW", (PyCFunction) _wrap_Model_getVariableFromMapRW, METH_VARARGS, (char*) "\n"
		"std::vector< float > * ccmc::Model::getVariableFromMapRW(long\n"
		"variable_id)\n"
		"\n"
		"Returns a pointer to the entry in the variableDataByID map containing\n"
		"the variable data.\n"
		"\n"
		"This pointer cannot be modified.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  Variable id of the variable to fetch from memory. This\n"
		"assumes the variable has already been loaded into memory. If the\n"
		"variable has not been loaded, the pointer will be NULL. Request the\n"
		"variable id by using FileReader::getVariableID(const std::string&\n"
		"variable)\n"
		"\n"
		"std::vector<float>* of the requested variable. Note that the pointer\n"
		"points to an entry in a map. The memory pointed to by the pointer will\n"
		"automatically be freed when the file is closed, or the Model object is\n"
		"deleted. \n"
		"" },
  { "getIntVariableFromMapRW", (PyCFunction) _wrap_Model_getIntVariableFromMapRW, METH_VARARGS, (char*) "\n"
		"std::vector< int > * ccmc::Model::getIntVariableFromMapRW(long\n"
		"variable_id)\n"
		"\n"
		"Returns a pointer to the entry in the variableDataIntByID map\n"
		"containing the variable data.\n"
		"\n"
		"This pointer cannot be modified.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  Variable id of the variable to fetch from memory. This\n"
		"assumes the variable has already been loaded into memory. If the\n"
		"variable has not been loaded, the pointer will be NULL. Request the\n"
		"variable id by using FileReader::getVariableID(const std::string&\n"
		"variable)\n"
		"\n"
		"std::vector<int>* of the requested variable. Note that the pointer\n"
		"points to an entry in a map. The memory pointed to by the pointer will\n"
		"automatically be freed when the file is closed, or the Model object is\n"
		"deleted. \n"
		"" },
  { "getVariableFromMap", (PyCFunction) _wrap_Model_getVariableFromMap, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< float > *const ccmc::Model::getVariableFromMap(long\n"
		"variable_id)\n"
		"\n"
		"Returns a const pointer to the entry in the variableDataByID map\n"
		"containing the variable data.\n"
		"\n"
		"This pointer cannot be modified.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  Variable id of the variable to fetch from memory. This\n"
		"assumes the variable has already been loaded into memory. If the\n"
		"variable has not been loaded, the pointer will be NULL. Request the\n"
		"variable id by using FileReader::getVariableID(const std::string&\n"
		"variable)\n"
		"\n"
		"std::vector<float>* of the requested variable. Note that the pointer\n"
		"points to an entry in a map and should not and cannot be deleted. The\n"
		"memory pointed to by the pointer will automatically be freed when the\n"
		"file is closed, or the Model object is deleted. \n"
		"" },
  { "getIntVariableFromMap", (PyCFunction) _wrap_Model_getIntVariableFromMap, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< int > *const ccmc::Model::getIntVariableFromMap(long\n"
		"variable_id)\n"
		"\n"
		"Returns a const pointer to the entry in the variableDataIntByID map\n"
		"containing the variable data.\n"
		"\n"
		"This pointer cannot be modified.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  Variable id of the variable to fetch from memory. This\n"
		"assumes the variable has already been loaded into memory. If the\n"
		"variable has not been loaded, the pointer will be NULL. Request the\n"
		"variable id by using FileReader::getVariableID(const std::string&\n"
		"variable)\n"
		"\n"
		"std::vector<int>* of the requested variable. Note that the pointer\n"
		"points to an entry in a map and should not and cannot be deleted. The\n"
		"memory pointed to by the pointer will automatically be freed when the\n"
		"file is closed, or the Model object is deleted. \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_Model_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::Model::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { "setMissingValue", (PyCFunction) _wrap_Model_setMissingValue, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Model::setMissingValue(float missingValue)\n"
		"\n"
		"Sets the missing value to use when no valid data exists.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"missingValue:  \n"
		"" },
  { "getMissingValue", (PyCFunction) _wrap_Model_getMissingValue, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Model::getMissingValue()\n"
		"\n"
		"Returns the missing value that will be returned when no valid data\n"
		"exists.\n"
		"\n"
		"This value can be used to check whether an interpolated value is a\n"
		"missing value or not.\n"
		"\n"
		"Missing value \n"
		"" },
  { "getConversionFactorToSI", (PyCFunction) _wrap_Model_getConversionFactorToSI, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::Model::getConversionFactorToSI(const std::string &variable)\n"
		"\n"
		"Returns the conversion factor needed to convert the interpolated value\n"
		"to SI units.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  Variable to request the conversion factor for.\n"
		"\n"
		"Conversion factor to convert the specified variable to SI units \n"
		"" },
  { "getNativeUnit", (PyCFunction) _wrap_Model_getNativeUnit, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Model::getNativeUnit(const std::string &variable)\n"
		"\n"
		"Fetches the native units of the variable as stored in the file.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  Variable to request units for.\n"
		"\n"
		"The native units of the specified variable, as stored in the file. \n"
		"" },
  { "getSIUnit", (PyCFunction) _wrap_Model_getSIUnit, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Model::getSIUnit(const std::string &variable)\n"
		"\n"
		"Returns the SI units of the specified variable.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable:  \n"
		"" },
  { "getProgress", (PyCFunction) _wrap_Model_getProgress, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::Model::getProgress() \n"
		"" },
  { "getBusyStatus", (PyCFunction) _wrap_Model_getBusyStatus, METH_VARARGS, (char*) "\n"
		"int\n"
		"ccmc::Model::getBusyStatus() \n"
		"" },
  { "close", (PyCFunction) _wrap_Model_close, METH_VARARGS, (char*) "\n"
		"long ccmc::Model::close()\n"
		"\n"
		"Closes the currently selected file. \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_Model_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"virtual\n"
		"Interpolator* ccmc::Model::createNewInterpolator()=0\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Model_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Model",                                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Model_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Model_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Model_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Model_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Model_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Model",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Model_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Model_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Model_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Model_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Model_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_OpenGGCM)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__OpenGGCM_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__OpenGGCM_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__OpenGGCM_methods[] = {
  { "open", (PyCFunction) _wrap_OpenGGCM_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::OpenGGCM::open(const std::string &filename)\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_OpenGGCM_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator * ccmc::OpenGGCM::createNewInterpolator()\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { "getXGrid", (PyCFunction) _wrap_OpenGGCM_getXGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::OpenGGCM::getXGrid(long variable) \n"
		"" },
  { "getYGrid", (PyCFunction) _wrap_OpenGGCM_getYGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::OpenGGCM::getYGrid(long variable) \n"
		"" },
  { "getZGrid", (PyCFunction) _wrap_OpenGGCM_getZGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::OpenGGCM::getZGrid(long variable) \n"
		"" },
  { "getXGridName", (PyCFunction) _wrap_OpenGGCM_getXGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::OpenGGCM::getXGridName(long variable_id) \n"
		"" },
  { "getYGridName", (PyCFunction) _wrap_OpenGGCM_getYGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::OpenGGCM::getYGridName(long variable_id) \n"
		"" },
  { "getZGridName", (PyCFunction) _wrap_OpenGGCM_getZGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::OpenGGCM::getZGridName(long variable_id) \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_OpenGGCM_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::OpenGGCM::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__OpenGGCM_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "OpenGGCM",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_OpenGGCM_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__OpenGGCM_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__OpenGGCM_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__OpenGGCM_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__OpenGGCM_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::OpenGGCM",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__OpenGGCM_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__OpenGGCM_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__OpenGGCM_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_OpenGGCM,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__OpenGGCM_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__OpenGGCM_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_BATSRUS)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__BATSRUS_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__BATSRUS_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__BATSRUS_methods[] = {
  { "open", (PyCFunction) _wrap_BATSRUS_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::BATSRUS::open(const std::string &filename)\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_BATSRUS_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator * ccmc::BATSRUS::createNewInterpolator()\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_BATSRUS_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::BATSRUS::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__BATSRUS_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "BATSRUS",                                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_BATSRUS_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__BATSRUS_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__BATSRUS_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__BATSRUS_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__BATSRUS_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::BATSRUS",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__BATSRUS_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__BATSRUS_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__BATSRUS_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_BATSRUS,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__BATSRUS_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__BATSRUS_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ENLIL)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__ENLIL_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__ENLIL_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__ENLIL_methods[] = {
  { "open", (PyCFunction) _wrap_ENLIL_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::ENLIL::open(const std::string &filename)\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_ENLIL_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator * ccmc::ENLIL::createNewInterpolator()\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { "getChangeSignFlag", (PyCFunction) _wrap_ENLIL_getChangeSignFlag, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::ENLIL::getChangeSignFlag(std::string variable) \n"
		"" },
  { "getChangeSignFlagByID", (PyCFunction) _wrap_ENLIL_getChangeSignFlagByID, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::ENLIL::getChangeSignFlagByID(long variable_id) \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_ENLIL_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::ENLIL::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__ENLIL_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "ENLIL",                                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ENLIL_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__ENLIL_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__ENLIL_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__ENLIL_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__ENLIL_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::ENLIL",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__ENLIL_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__ENLIL_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__ENLIL_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_ENLIL,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__ENLIL_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__ENLIL_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_MAS)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__MAS_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__MAS_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__MAS_methods[] = {
  { "open", (PyCFunction) _wrap_MAS_open, METH_VARARGS, (char*) "\n"
		"long ccmc::MAS::open(const\n"
		"std::string &filename)\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_MAS_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator\n"
		"* ccmc::MAS::createNewInterpolator()\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { "getRPosGrid", (PyCFunction) _wrap_MAS_getRPosGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::MAS::getRPosGrid(long variable_id) \n"
		"" },
  { "getRPosGridName", (PyCFunction) _wrap_MAS_getRPosGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::MAS::getRPosGridName(long variable) \n"
		"" },
  { "getLatPosGrid", (PyCFunction) _wrap_MAS_getLatPosGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::MAS::getLatPosGrid(long variable_id) \n"
		"" },
  { "getLatPosGridName", (PyCFunction) _wrap_MAS_getLatPosGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::MAS::getLatPosGridName(long variable_id) \n"
		"" },
  { "getLonPosGrid", (PyCFunction) _wrap_MAS_getLonPosGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::MAS::getLonPosGrid(long variable_id) \n"
		"" },
  { "getlonPosGrid", (PyCFunction) _wrap_MAS_getlonPosGrid, METH_VARARGS, (char*) "\n"
		"const std::vector<\n"
		"float > *const ccmc::MAS::getlonPosGrid(const std::string &variable)\n"
		"\n"
		"" },
  { "getLonPosGridName", (PyCFunction) _wrap_MAS_getLonPosGridName, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::MAS::getLonPosGridName(long variable_id) \n"
		"" },
  { "getChangeSignFlag", (PyCFunction) _wrap_MAS_getChangeSignFlag, METH_VARARGS, (char*) "\n"
		"bool\n"
		"ccmc::MAS::getChangeSignFlag(long variable_id) \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_MAS_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::MAS::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__MAS_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "MAS",                                    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_MAS_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__MAS_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__MAS_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__MAS_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__MAS_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::MAS",                              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__MAS_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__MAS_methods,         /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__MAS_getset,          /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_MAS,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__MAS_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__MAS_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SWMFIono)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__SWMFIono_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__SWMFIono_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__SWMFIono_methods[] = {
  { "open", (PyCFunction) _wrap_SWMFIono_open, METH_VARARGS, (char*) "\n"
		"long\n"
		"ccmc::SWMFIono::open(const std::string &filename)\n"
		"\n"
		"Opens a file.\n"
		"\n"
		"Opens a file and performs any necessary initialization required to\n"
		"work with the data.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  \n"
		"" },
  { "createNewInterpolator", (PyCFunction) _wrap_SWMFIono_createNewInterpolator, METH_VARARGS, (char*) "\n"
		"Interpolator * ccmc::SWMFIono::createNewInterpolator()\n"
		"\n"
		"Returns an Interpolator object for the currently opened file.\n"
		"\n"
		"This returns an Interpolator object that contains all the necessary\n"
		"local variables required to interpolate independent of any other\n"
		"Interpolator object. The pointer must be deleted from the calling\n"
		"program. A pointer to an Interpolator object. \n"
		"" },
  { "getLoadedVariables", (PyCFunction) _wrap_SWMFIono_getLoadedVariables, METH_VARARGS, (char*) "\n"
		"const\n"
		"std::vector< std::string > ccmc::SWMFIono::getLoadedVariables()\n"
		"\n"
		"Returns the list of variables that have been loaded into memory, using\n"
		"the loadVariable or loadVectorVariable methods. \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__SWMFIono_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "SWMFIono",                               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SWMFIono_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__SWMFIono_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__SWMFIono_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__SWMFIono_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__SWMFIono_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::SWMFIono",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__SWMFIono_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__SWMFIono_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__SWMFIono_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_SWMFIono,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__SWMFIono_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__SWMFIono_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_BATSRUSInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__BATSRUSInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__BATSRUSInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__BATSRUSInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_BATSRUSInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::BATSRUSInterpolator::interpolate(const long &variable_id, const\n"
		"float &c0, const float &c1, const float &c2, float &dc0, float &dc1,\n"
		"float &dc2)\n"
		"\n"
		"Interpolation method. Note that using the variable ID is significantly\n"
		"faster than using the variable string.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  A long representing the variable ID.\n"
		"\n"
		"c0:  X component of the position\n"
		"\n"
		"c1:  Y component of the position\n"
		"\n"
		"c2:  Z component of the position\n"
		"\n"
		"dc0:  Reference to a variable to store the delta for component 0\n"
		"\n"
		"dc1:  Reference to a variable to store the delta for component 1\n"
		"\n"
		"dc2:  Reference to a variable to store the delta for component 2\n"
		"\n"
		"The interpolated value at position (c0,c1,c2) with deltas\n"
		"(dc0,dc1,dc2)\n"
		"\n"
		"end of if new position loop \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__BATSRUSInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "BATSRUSInterpolator",                    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_BATSRUSInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__BATSRUSInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__BATSRUSInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__BATSRUSInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__BATSRUSInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::BATSRUSInterpolator",              /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__BATSRUSInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__BATSRUSInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__BATSRUSInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_BATSRUSInterpolator, /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__BATSRUSInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__BATSRUSInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ENLILInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__ENLILInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__ENLILInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__ENLILInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_ENLILInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::ENLILInterpolator::interpolate(const long &variableID, const\n"
		"float &r, const float &lat, const float &lon, float &dr, float &dlat,\n"
		"float &dlon)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variableID:\n"
		"\n"
		"r:\n"
		"\n"
		"lat:\n"
		"\n"
		"lon:\n"
		"\n"
		"dr:\n"
		"\n"
		"dlat:\n"
		"\n"
		"dlon:\n"
		"\n"
		"convert from latitude -60 to 60 to radians ...\n"
		"\n"
		"convert from latitude -60 to 60 to radians ...\n"
		"\n"
		"convert from latitude -60...60 to 30...150 range in degress and then\n"
		"to radians...\n"
		"\n"
		"convert degrees ( 0 - 360 longitude ) to radiadns\n"
		"\n"
		"correct for longitude angles less than 0 or having a magnitude greater\n"
		"than 360.f \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__ENLILInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "ENLILInterpolator",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ENLILInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__ENLILInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__ENLILInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__ENLILInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__ENLILInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::ENLILInterpolator",                /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__ENLILInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__ENLILInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__ENLILInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_ENLILInterpolator,   /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__ENLILInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__ENLILInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_MASInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__MASInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__MASInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__MASInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_MASInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::MASInterpolator::interpolate(const long &variable_id, const\n"
		"float &r, const float &lat, const float &lon, float &dr, float &dlat,\n"
		"float &dlon)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variableID:\n"
		"\n"
		"r:\n"
		"\n"
		"lat:\n"
		"\n"
		"lon:\n"
		"\n"
		"dr:\n"
		"\n"
		"dlat:\n"
		"\n"
		"dlon:\n"
		"\n"
		"convert from latitude -60 to 60 to radians ...\n"
		"\n"
		"convert from latitude -60 to 60 to radians ...\n"
		"\n"
		"convert from latitude -60...60 to 30...150 range in degress and then\n"
		"to radians...\n"
		"\n"
		"convert degrees ( 0 - 360 longitude ) to radiadns\n"
		"\n"
		"correct for longitude angles less than 0 or having a magnitude greater\n"
		"than 360.f \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__MASInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "MASInterpolator",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_MASInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__MASInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__MASInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__MASInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__MASInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::MASInterpolator",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__MASInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__MASInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__MASInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_MASInterpolator,     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__MASInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__MASInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_OpenGGCMInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__OpenGGCMInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__OpenGGCMInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__OpenGGCMInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_OpenGGCMInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::OpenGGCMInterpolator::interpolate(const long &variable_id, const\n"
		"float &c0, const float &c1, const float &c2, float &dc0, float &dc1,\n"
		"float &dc2)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:\n"
		"\n"
		"c0:\n"
		"\n"
		"c1:\n"
		"\n"
		"c2:\n"
		"\n"
		"dc0:  Reference to a variable to store the delta for component 0\n"
		"\n"
		"dc1:  Reference to a variable to store the delta for component 1\n"
		"\n"
		"dc2:  Reference to a variable to store the delta for component 2\n"
		"\n"
		"The interpolated value at position (c0,c1,c2) with deltas\n"
		"(dc0,dc1,dc2) \n"
		"" },
  { "getConversionFactor", (PyCFunction) _wrap_OpenGGCMInterpolator_getConversionFactor, METH_VARARGS, (char*) "\n"
		"float ccmc::OpenGGCMInterpolator::getConversionFactor(const long\n"
		"&variable_id)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"variable_id:  \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "OpenGGCMInterpolator",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_OpenGGCMInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::OpenGGCMInterpolator",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__OpenGGCMInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__OpenGGCMInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__OpenGGCMInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_OpenGGCMInterpolator, /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__OpenGGCMInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SWMFIonoInterpolator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__SWMFIonoInterpolator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__SWMFIonoInterpolator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__SWMFIonoInterpolator_methods[] = {
  { "interpolate", (PyCFunction) _wrap_SWMFIonoInterpolator_interpolate, METH_VARARGS, (char*) "\n"
		"float\n"
		"ccmc::SWMFIonoInterpolator::interpolate(const long &variable_id, const\n"
		"float &r, const float &lat, const float &lon, float &dr, float &dlat,\n"
		"float &dlon) \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "SWMFIonoInterpolator",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SWMFIonoInterpolator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::SWMFIonoInterpolator",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__SWMFIonoInterpolator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__SWMFIonoInterpolator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__SWMFIonoInterpolator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_SWMFIonoInterpolator, /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__SWMFIonoInterpolator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Time)
SWIGINTERN PyGetSetDef SwigPyBuiltin__ccmc__Time_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__ccmc__Time_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__ccmc__Time_methods[] = {
  { "getDay", (PyCFunction) _wrap_Time_getDay, METH_VARARGS, (char*) "\n"
		"short ccmc::Time::getDay()\n"
		"const \n"
		"" },
  { "setDay", (PyCFunction) _wrap_Time_setDay, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setDay(short day) \n"
		"" },
  { "setEpoch", (PyCFunction) _wrap_Time_setEpoch, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setEpoch(double epoch) \n"
		"" },
  { "getHour", (PyCFunction) _wrap_Time_getHour, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getHour() const \n"
		"" },
  { "setHour", (PyCFunction) _wrap_Time_setHour, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setHour(short hour) \n"
		"" },
  { "getMilliseconds", (PyCFunction) _wrap_Time_getMilliseconds, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getMilliseconds() const \n"
		"" },
  { "setMilliseconds", (PyCFunction) _wrap_Time_setMilliseconds, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setMilliseconds(short milliseconds) \n"
		"" },
  { "getMinute", (PyCFunction) _wrap_Time_getMinute, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getMinute() const \n"
		"" },
  { "setMinute", (PyCFunction) _wrap_Time_setMinute, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setMinute(short minute) \n"
		"" },
  { "getMonth", (PyCFunction) _wrap_Time_getMonth, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getMonth() const \n"
		"" },
  { "setMonth", (PyCFunction) _wrap_Time_setMonth, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setMonth(short month) \n"
		"" },
  { "getSeconds", (PyCFunction) _wrap_Time_getSeconds, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getSeconds() const \n"
		"" },
  { "setSeconds", (PyCFunction) _wrap_Time_setSeconds, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setSeconds(double seconds) \n"
		"" },
  { "getYear", (PyCFunction) _wrap_Time_getYear, METH_VARARGS, (char*) "\n"
		"short\n"
		"ccmc::Time::getYear() const \n"
		"" },
  { "setYear", (PyCFunction) _wrap_Time_setYear, METH_VARARGS, (char*) "\n"
		"void\n"
		"ccmc::Time::setYear(short year) \n"
		"" },
  { "toString", (PyCFunction) _wrap_Time_toString, METH_VARARGS, (char*) "\n"
		"std::string\n"
		"ccmc::Time::toString() const \n"
		"" },
  { "getEpoch", (PyCFunction) _wrap_Time_getEpoch, METH_VARARGS, (char*) "\n"
		"double\n"
		"ccmc::Time::getEpoch() const \n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__ccmc__Time_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Time",                                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Time_closure,   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__ccmc__Time_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__ccmc__Time_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__ccmc__Time_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__ccmc__Time_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "ccmc::Time",                             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__ccmc__Time_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__ccmc__Time_methods,        /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__ccmc__Time_getset,         /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_Time,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__ccmc__Time_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__ccmc__Time_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_point3f)
SWIGINTERN PyGetSetDef SwigPyBuiltin__vectorT_Point3f_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__vectorT_Point3f_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__vectorT_Point3f_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_vector_point3f_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap_vector_point3f___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap_vector_point3f___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap_vector_point3f___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap_vector_point3f_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap_vector_point3f___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap_vector_point3f___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap_vector_point3f___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap_vector_point3f___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_vector_point3f___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_vector_point3f___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap_vector_point3f_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap_vector_point3f_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap_vector_point3f_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap_vector_point3f_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap_vector_point3f_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap_vector_point3f_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap_vector_point3f_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap_vector_point3f_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap_vector_point3f_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap_vector_point3f_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap_vector_point3f_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap_vector_point3f_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap_vector_point3f_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap_vector_point3f_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap_vector_point3f_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap_vector_point3f_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap_vector_point3f_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap_vector_point3f_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap_vector_point3f_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap_vector_point3f_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__vectorT_Point3f_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "vector_point3f",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_vector_point3f_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__vectorT_Point3f_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__vectorT_Point3f_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__vectorT_Point3f_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__vectorT_Point3f_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::vector< Point3f >",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__vectorT_Point3f_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__vectorT_Point3f_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__vectorT_Point3f_t_getset,  /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_vector_point3f,      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_vector_point3f___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_vector_point3f___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_vector_point3f___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_vector_point3f___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__vectorT_Point3f_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__vectorT_Point3f_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_string)
SWIGINTERN PyGetSetDef SwigPyBuiltin__vectorT_std__string_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__vectorT_std__string_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__vectorT_std__string_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_vector_string_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap_vector_string___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap_vector_string___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap_vector_string___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap_vector_string_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap_vector_string___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap_vector_string___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap_vector_string___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap_vector_string___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_vector_string___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_vector_string___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap_vector_string_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap_vector_string_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap_vector_string_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap_vector_string_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap_vector_string_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap_vector_string_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap_vector_string_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap_vector_string_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap_vector_string_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap_vector_string_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap_vector_string_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap_vector_string_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap_vector_string_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap_vector_string_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap_vector_string_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap_vector_string_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap_vector_string_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap_vector_string_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap_vector_string_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap_vector_string_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__vectorT_std__string_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "vector_string",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_vector_string_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__vectorT_std__string_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__vectorT_std__string_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__vectorT_std__string_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__vectorT_std__string_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "vector< std::string >",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__vectorT_std__string_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__vectorT_std__string_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__vectorT_std__string_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_vector_string,       /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_vector_string___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_vector_string___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_vector_string___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_vector_string___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__vectorT_std__string_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__vectorT_std__string_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_float)
SWIGINTERN PyGetSetDef SwigPyBuiltin__vectorT_float_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__vectorT_float_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__vectorT_float_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_vector_float_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap_vector_float___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap_vector_float___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap_vector_float___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap_vector_float_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap_vector_float___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap_vector_float___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap_vector_float___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap_vector_float___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_vector_float___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_vector_float___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap_vector_float_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap_vector_float_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap_vector_float_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap_vector_float_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap_vector_float_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap_vector_float_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap_vector_float_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap_vector_float_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap_vector_float_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap_vector_float_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap_vector_float_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap_vector_float_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap_vector_float_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap_vector_float_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap_vector_float_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap_vector_float_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap_vector_float_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap_vector_float_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap_vector_float_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap_vector_float_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__vectorT_float_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "vector_float",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_vector_float_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__vectorT_float_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__vectorT_float_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__vectorT_float_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__vectorT_float_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::vector< float >",                      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__vectorT_float_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__vectorT_float_t_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__vectorT_float_t_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_vector_float,        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_vector_float___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_vector_float___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_vector_float___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_vector_float___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__vectorT_float_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__vectorT_float_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_fieldline)
SWIGINTERN PyGetSetDef SwigPyBuiltin__vectorT_Fieldline_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__vectorT_Fieldline_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__vectorT_Fieldline_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_vector_fieldline_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap_vector_fieldline___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap_vector_fieldline___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap_vector_fieldline___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap_vector_fieldline_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap_vector_fieldline___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap_vector_fieldline___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap_vector_fieldline___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap_vector_fieldline___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_vector_fieldline___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_vector_fieldline___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap_vector_fieldline_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap_vector_fieldline_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap_vector_fieldline_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap_vector_fieldline_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap_vector_fieldline_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap_vector_fieldline_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap_vector_fieldline_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap_vector_fieldline_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap_vector_fieldline_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap_vector_fieldline_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap_vector_fieldline_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap_vector_fieldline_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap_vector_fieldline_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap_vector_fieldline_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap_vector_fieldline_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap_vector_fieldline_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap_vector_fieldline_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap_vector_fieldline_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap_vector_fieldline_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap_vector_fieldline_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__vectorT_Fieldline_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "vector_fieldline",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_vector_fieldline_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__vectorT_Fieldline_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__vectorT_Fieldline_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__vectorT_Fieldline_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__vectorT_Fieldline_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::vector< Fieldline >",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__vectorT_Fieldline_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__vectorT_Fieldline_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__vectorT_Fieldline_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_vector_fieldline,    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_vector_fieldline___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_vector_fieldline___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_vector_fieldline___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_vector_fieldline___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__vectorT_Fieldline_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__vectorT_Fieldline_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_vector_int)
SWIGINTERN PyGetSetDef SwigPyBuiltin__vectorT_int_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__vectorT_int_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__vectorT_int_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_vector_int_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap_vector_int___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap_vector_int___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap_vector_int___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap_vector_int_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap_vector_int___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap_vector_int___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap_vector_int___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap_vector_int___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_vector_int___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_vector_int___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap_vector_int_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap_vector_int_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap_vector_int_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap_vector_int_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap_vector_int_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap_vector_int_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap_vector_int_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap_vector_int_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap_vector_int_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap_vector_int_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap_vector_int_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap_vector_int_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap_vector_int_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap_vector_int_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap_vector_int_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap_vector_int_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap_vector_int_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap_vector_int_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap_vector_int_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap_vector_int_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__vectorT_int_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "vector_int",                             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_vector_int_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__vectorT_int_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__vectorT_int_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__vectorT_int_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__vectorT_int_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::vector< int >",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__vectorT_int_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__vectorT_int_t_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__vectorT_int_t_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (size_t)(((char*)&((SwigPyObject *) 64L)->dict) - (char*) 64L), /* tp_dictoffset */
    (initproc) _wrap_new_vector_int,          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_vector_int___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_vector_int___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_vector_int___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_vector_int___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__vectorT_int_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__vectorT_int_t_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ccmc__CDFFileReaderTo_p_ccmc__FileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::FileReader *)  ((ccmc::CDFFileReader *) x));
}
static void *_p_ccmc__BATSRUSTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *) (ccmc::Model *) ((ccmc::BATSRUS *) x));
}
static void *_p_ccmc__ModelTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *)  ((ccmc::Model *) x));
}
static void *_p_ccmc__OpenGGCMTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *) (ccmc::Model *) ((ccmc::OpenGGCM *) x));
}
static void *_p_ccmc__MASTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *) (ccmc::Model *) ((ccmc::MAS *) x));
}
static void *_p_ccmc__ENLILTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *) (ccmc::Model *) ((ccmc::ENLIL *) x));
}
static void *_p_ccmc__SWMFIonoTo_p_ccmc__GeneralFileReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::GeneralFileReader *) (ccmc::Model *) ((ccmc::SWMFIono *) x));
}
static void *_p_ccmc__KameleonInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::KameleonInterpolator *) x));
}
static void *_p_ccmc__BATSRUSInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::BATSRUSInterpolator *) x));
}
static void *_p_ccmc__ENLILInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::ENLILInterpolator *) x));
}
static void *_p_ccmc__MASInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::MASInterpolator *) x));
}
static void *_p_ccmc__OpenGGCMInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::OpenGGCMInterpolator *) x));
}
static void *_p_ccmc__SWMFIonoInterpolatorTo_p_ccmc__Interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Interpolator *)  ((ccmc::SWMFIonoInterpolator *) x));
}
static void *_p_ccmc__BATSRUSTo_p_ccmc__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Model *)  ((ccmc::BATSRUS *) x));
}
static void *_p_ccmc__OpenGGCMTo_p_ccmc__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Model *)  ((ccmc::OpenGGCM *) x));
}
static void *_p_ccmc__MASTo_p_ccmc__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Model *)  ((ccmc::MAS *) x));
}
static void *_p_ccmc__ENLILTo_p_ccmc__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Model *)  ((ccmc::ENLIL *) x));
}
static void *_p_ccmc__SWMFIonoTo_p_ccmc__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ccmc::Model *)  ((ccmc::SWMFIono *) x));
}
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t = {"_p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t", "boost::unordered_map< int,ccmc::GeneralFileReader * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__unordered_mapT_int_ccmc__Interpolator_p_t = {"_p_boost__unordered_mapT_int_ccmc__Interpolator_p_t", "boost::unordered_map< int,ccmc::Interpolator * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__unordered_mapT_int_ccmc__Kameleon_p_t = {"_p_boost__unordered_mapT_int_ccmc__Kameleon_p_t", "boost::unordered_map< int,ccmc::Kameleon * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t = {"_p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t", "boost::unordered_map< int,ccmc::TimeInterpolator * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__unordered_mapT_int_ccmc__Tracer_p_t = {"_p_boost__unordered_mapT_int_ccmc__Tracer_p_t", "boost::unordered_map< int,ccmc::Tracer * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ccmc__Attribute = {"_p_ccmc__Attribute", "Attribute *|ccmc::Attribute *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Attribute_clientdata, 0};
static swig_type_info _swigt__p_ccmc__BATSRUS = {"_p_ccmc__BATSRUS", "ccmc::BATSRUS *", 0, 0, (void*)&SwigPyBuiltin__ccmc__BATSRUS_clientdata, 0};
static swig_type_info _swigt__p_ccmc__BATSRUSInterpolator = {"_p_ccmc__BATSRUSInterpolator", "ccmc::BATSRUSInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__BATSRUSInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__CDFFileReader = {"_p_ccmc__CDFFileReader", "ccmc::CDFFileReader *", 0, 0, (void*)&SwigPyBuiltin__ccmc__CDFFileReader_clientdata, 0};
static swig_type_info _swigt__p_ccmc__ENLIL = {"_p_ccmc__ENLIL", "ccmc::ENLIL *", 0, 0, (void*)&SwigPyBuiltin__ccmc__ENLIL_clientdata, 0};
static swig_type_info _swigt__p_ccmc__ENLILInterpolator = {"_p_ccmc__ENLILInterpolator", "ccmc::ENLILInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__ENLILInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Fieldline = {"_p_ccmc__Fieldline", "vector< ccmc::Fieldline >::value_type *|ccmc::Fieldline *|Fieldline *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Fieldline_clientdata, 0};
static swig_type_info _swigt__p_ccmc__FileReader = {"_p_ccmc__FileReader", "ccmc::FileReader *", 0, 0, (void*)&SwigPyBuiltin__ccmc__FileReader_clientdata, 0};
static swig_type_info _swigt__p_ccmc__GeneralFileReader = {"_p_ccmc__GeneralFileReader", "ccmc::GeneralFileReader *", 0, 0, (void*)&SwigPyBuiltin__ccmc__GeneralFileReader_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Interpolator = {"_p_ccmc__Interpolator", "ccmc::Interpolator *|Interpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Interpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Kameleon = {"_p_ccmc__Kameleon", "ccmc::Kameleon *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Kameleon_clientdata, 0};
static swig_type_info _swigt__p_ccmc__KameleonInterpolator = {"_p_ccmc__KameleonInterpolator", "ccmc::KameleonInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__KameleonInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__MAS = {"_p_ccmc__MAS", "ccmc::MAS *", 0, 0, (void*)&SwigPyBuiltin__ccmc__MAS_clientdata, 0};
static swig_type_info _swigt__p_ccmc__MASInterpolator = {"_p_ccmc__MASInterpolator", "ccmc::MASInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__MASInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Model = {"_p_ccmc__Model", "ccmc::Model *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Model_clientdata, 0};
static swig_type_info _swigt__p_ccmc__OpenGGCM = {"_p_ccmc__OpenGGCM", "ccmc::OpenGGCM *", 0, 0, (void*)&SwigPyBuiltin__ccmc__OpenGGCM_clientdata, 0};
static swig_type_info _swigt__p_ccmc__OpenGGCMInterpolator = {"_p_ccmc__OpenGGCMInterpolator", "ccmc::OpenGGCMInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__OpenGGCMInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Point3f = {"_p_ccmc__Point3f", "ccmc::Point3f *|Point3f *|vector< ccmc::Point3f >::value_type *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Point3f_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Position = {"_p_ccmc__Position", "ccmc::Position *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Position_clientdata, 0};
static swig_type_info _swigt__p_ccmc__SWMFIono = {"_p_ccmc__SWMFIono", "ccmc::SWMFIono *", 0, 0, (void*)&SwigPyBuiltin__ccmc__SWMFIono_clientdata, 0};
static swig_type_info _swigt__p_ccmc__SWMFIonoInterpolator = {"_p_ccmc__SWMFIonoInterpolator", "ccmc::SWMFIonoInterpolator *", 0, 0, (void*)&SwigPyBuiltin__ccmc__SWMFIonoInterpolator_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Time = {"_p_ccmc__Time", "ccmc::Time *|Time *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Time_clientdata, 0};
static swig_type_info _swigt__p_ccmc__Tracer = {"_p_ccmc__Tracer", "ccmc::Tracer *", 0, 0, (void*)&SwigPyBuiltin__ccmc__Tracer_clientdata, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *|CDFstatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ccmc__Fieldline_t = {"_p_std__allocatorT_ccmc__Fieldline_t", "vector< ccmc::Fieldline >::allocator_type *|std::allocator< ccmc::Fieldline > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ccmc__Point3f_t = {"_p_std__allocatorT_ccmc__Point3f_t", "vector< ccmc::Point3f >::allocator_type *|std::allocator< ccmc::Point3f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t = {"_p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t", "vector< ccmc::Fieldline > *|vector< Fieldline > *|std::vector< Fieldline > *|std::vector< Fieldline,std::allocator< ccmc::Fieldline > > *|vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *|std::vector< ccmc::Fieldline,std::allocator< ccmc::Fieldline > > *", 0, 0, (void*)&SwigPyBuiltin__vectorT_Fieldline_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t = {"_p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t", "vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *|std::vector< Point3f,std::allocator< ccmc::Point3f > > *|vector< ccmc::Point3f > *|vector< Point3f > *|std::vector< Point3f > *|std::vector< ccmc::Point3f,std::allocator< ccmc::Point3f > > *", 0, 0, (void*)&SwigPyBuiltin__vectorT_Point3f_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "vector< float > *|vector< float,std::allocator< float > > *|std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)&SwigPyBuiltin__vectorT_float_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|vector< int,std::allocator< int > > *|vector< int > *|std::vector< int > *", 0, 0, (void*)&SwigPyBuiltin__vectorT_int_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|vector< std::string > *|vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)&SwigPyBuiltin__vectorT_std__string_t_clientdata, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)&SwigPyBuiltin__swig__SwigPyIterator_clientdata, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SwigPyObject,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t,
  &_swigt__p_boost__unordered_mapT_int_ccmc__Interpolator_p_t,
  &_swigt__p_boost__unordered_mapT_int_ccmc__Kameleon_p_t,
  &_swigt__p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t,
  &_swigt__p_boost__unordered_mapT_int_ccmc__Tracer_p_t,
  &_swigt__p_ccmc__Attribute,
  &_swigt__p_ccmc__BATSRUS,
  &_swigt__p_ccmc__BATSRUSInterpolator,
  &_swigt__p_ccmc__CDFFileReader,
  &_swigt__p_ccmc__ENLIL,
  &_swigt__p_ccmc__ENLILInterpolator,
  &_swigt__p_ccmc__Fieldline,
  &_swigt__p_ccmc__FileReader,
  &_swigt__p_ccmc__GeneralFileReader,
  &_swigt__p_ccmc__Interpolator,
  &_swigt__p_ccmc__Kameleon,
  &_swigt__p_ccmc__KameleonInterpolator,
  &_swigt__p_ccmc__MAS,
  &_swigt__p_ccmc__MASInterpolator,
  &_swigt__p_ccmc__Model,
  &_swigt__p_ccmc__OpenGGCM,
  &_swigt__p_ccmc__OpenGGCMInterpolator,
  &_swigt__p_ccmc__Point3f,
  &_swigt__p_ccmc__Position,
  &_swigt__p_ccmc__SWMFIono,
  &_swigt__p_ccmc__SWMFIonoInterpolator,
  &_swigt__p_ccmc__Time,
  &_swigt__p_ccmc__Tracer,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_ccmc__Fieldline_t,
  &_swigt__p_std__allocatorT_ccmc__Point3f_t,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t,
  &_swigt__p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t[] = {  {&_swigt__p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__unordered_mapT_int_ccmc__Interpolator_p_t[] = {  {&_swigt__p_boost__unordered_mapT_int_ccmc__Interpolator_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__unordered_mapT_int_ccmc__Kameleon_p_t[] = {  {&_swigt__p_boost__unordered_mapT_int_ccmc__Kameleon_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t[] = {  {&_swigt__p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__unordered_mapT_int_ccmc__Tracer_p_t[] = {  {&_swigt__p_boost__unordered_mapT_int_ccmc__Tracer_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Attribute[] = {  {&_swigt__p_ccmc__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__BATSRUS[] = {  {&_swigt__p_ccmc__BATSRUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__BATSRUSInterpolator[] = {  {&_swigt__p_ccmc__BATSRUSInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__CDFFileReader[] = {  {&_swigt__p_ccmc__CDFFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__ENLIL[] = {  {&_swigt__p_ccmc__ENLIL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__ENLILInterpolator[] = {  {&_swigt__p_ccmc__ENLILInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Fieldline[] = {  {&_swigt__p_ccmc__Fieldline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__FileReader[] = {  {&_swigt__p_ccmc__FileReader, 0, 0, 0},  {&_swigt__p_ccmc__CDFFileReader, _p_ccmc__CDFFileReaderTo_p_ccmc__FileReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__GeneralFileReader[] = {  {&_swigt__p_ccmc__BATSRUS, _p_ccmc__BATSRUSTo_p_ccmc__GeneralFileReader, 0, 0},  {&_swigt__p_ccmc__OpenGGCM, _p_ccmc__OpenGGCMTo_p_ccmc__GeneralFileReader, 0, 0},  {&_swigt__p_ccmc__Model, _p_ccmc__ModelTo_p_ccmc__GeneralFileReader, 0, 0},  {&_swigt__p_ccmc__GeneralFileReader, 0, 0, 0},  {&_swigt__p_ccmc__ENLIL, _p_ccmc__ENLILTo_p_ccmc__GeneralFileReader, 0, 0},  {&_swigt__p_ccmc__MAS, _p_ccmc__MASTo_p_ccmc__GeneralFileReader, 0, 0},  {&_swigt__p_ccmc__SWMFIono, _p_ccmc__SWMFIonoTo_p_ccmc__GeneralFileReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Interpolator[] = {  {&_swigt__p_ccmc__Interpolator, 0, 0, 0},  {&_swigt__p_ccmc__KameleonInterpolator, _p_ccmc__KameleonInterpolatorTo_p_ccmc__Interpolator, 0, 0},  {&_swigt__p_ccmc__BATSRUSInterpolator, _p_ccmc__BATSRUSInterpolatorTo_p_ccmc__Interpolator, 0, 0},  {&_swigt__p_ccmc__ENLILInterpolator, _p_ccmc__ENLILInterpolatorTo_p_ccmc__Interpolator, 0, 0},  {&_swigt__p_ccmc__MASInterpolator, _p_ccmc__MASInterpolatorTo_p_ccmc__Interpolator, 0, 0},  {&_swigt__p_ccmc__OpenGGCMInterpolator, _p_ccmc__OpenGGCMInterpolatorTo_p_ccmc__Interpolator, 0, 0},  {&_swigt__p_ccmc__SWMFIonoInterpolator, _p_ccmc__SWMFIonoInterpolatorTo_p_ccmc__Interpolator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Kameleon[] = {  {&_swigt__p_ccmc__Kameleon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__KameleonInterpolator[] = {  {&_swigt__p_ccmc__KameleonInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__MAS[] = {  {&_swigt__p_ccmc__MAS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__MASInterpolator[] = {  {&_swigt__p_ccmc__MASInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Model[] = {  {&_swigt__p_ccmc__BATSRUS, _p_ccmc__BATSRUSTo_p_ccmc__Model, 0, 0},  {&_swigt__p_ccmc__OpenGGCM, _p_ccmc__OpenGGCMTo_p_ccmc__Model, 0, 0},  {&_swigt__p_ccmc__Model, 0, 0, 0},  {&_swigt__p_ccmc__ENLIL, _p_ccmc__ENLILTo_p_ccmc__Model, 0, 0},  {&_swigt__p_ccmc__MAS, _p_ccmc__MASTo_p_ccmc__Model, 0, 0},  {&_swigt__p_ccmc__SWMFIono, _p_ccmc__SWMFIonoTo_p_ccmc__Model, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__OpenGGCM[] = {  {&_swigt__p_ccmc__OpenGGCM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__OpenGGCMInterpolator[] = {  {&_swigt__p_ccmc__OpenGGCMInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Point3f[] = {  {&_swigt__p_ccmc__Point3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Position[] = {  {&_swigt__p_ccmc__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__SWMFIono[] = {  {&_swigt__p_ccmc__SWMFIono, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__SWMFIonoInterpolator[] = {  {&_swigt__p_ccmc__SWMFIonoInterpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Time[] = {  {&_swigt__p_ccmc__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ccmc__Tracer[] = {  {&_swigt__p_ccmc__Tracer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ccmc__Fieldline_t[] = {  {&_swigt__p_std__allocatorT_ccmc__Fieldline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ccmc__Point3f_t[] = {  {&_swigt__p_std__allocatorT_ccmc__Point3f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t[] = {  {&_swigt__p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t[] = {  {&_swigt__p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SwigPyObject,
  _swigc__p_allocator_type,
  _swigc__p_boost__unordered_mapT_int_ccmc__GeneralFileReader_p_t,
  _swigc__p_boost__unordered_mapT_int_ccmc__Interpolator_p_t,
  _swigc__p_boost__unordered_mapT_int_ccmc__Kameleon_p_t,
  _swigc__p_boost__unordered_mapT_int_ccmc__TimeInterpolator_p_t,
  _swigc__p_boost__unordered_mapT_int_ccmc__Tracer_p_t,
  _swigc__p_ccmc__Attribute,
  _swigc__p_ccmc__BATSRUS,
  _swigc__p_ccmc__BATSRUSInterpolator,
  _swigc__p_ccmc__CDFFileReader,
  _swigc__p_ccmc__ENLIL,
  _swigc__p_ccmc__ENLILInterpolator,
  _swigc__p_ccmc__Fieldline,
  _swigc__p_ccmc__FileReader,
  _swigc__p_ccmc__GeneralFileReader,
  _swigc__p_ccmc__Interpolator,
  _swigc__p_ccmc__Kameleon,
  _swigc__p_ccmc__KameleonInterpolator,
  _swigc__p_ccmc__MAS,
  _swigc__p_ccmc__MASInterpolator,
  _swigc__p_ccmc__Model,
  _swigc__p_ccmc__OpenGGCM,
  _swigc__p_ccmc__OpenGGCMInterpolator,
  _swigc__p_ccmc__Point3f,
  _swigc__p_ccmc__Position,
  _swigc__p_ccmc__SWMFIono,
  _swigc__p_ccmc__SWMFIonoInterpolator,
  _swigc__p_ccmc__Time,
  _swigc__p_ccmc__Tracer,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_ccmc__Fieldline_t,
  _swigc__p_std__allocatorT_ccmc__Point3f_t,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_ccmc__Fieldline_std__allocatorT_ccmc__Fieldline_t_t,
  _swigc__p_std__vectorT_ccmc__Point3f_std__allocatorT_ccmc__Point3f_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  /* type 'swig::SwigPyIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SwigPyIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SwigPyIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SwigPyIterator");
  d = md;
  
  /* type 'ccmc::FileReader' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__FileReader_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OK",SWIG_From_long(static_cast< long >(ccmc::FileReader::OK)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OPEN_ERROR",SWIG_From_long(static_cast< long >(ccmc::FileReader::OPEN_ERROR)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "FILE_DOES_NOT_EXIST",SWIG_From_long(static_cast< long >(ccmc::FileReader::FILE_DOES_NOT_EXIST)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "VARIABLE_DOES_NOT_EXIST",SWIG_From_long(static_cast< long >(ccmc::FileReader::VARIABLE_DOES_NOT_EXIST)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "ATTRIBUTE_DOES_NOT_EXIST",SWIG_From_long(static_cast< long >(ccmc::FileReader::ATTRIBUTE_DOES_NOT_EXIST)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "LOAD_FAILED",SWIG_From_long(static_cast< long >(ccmc::FileReader::LOAD_FAILED)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "UNABLE_TO_ALLOCATE_MEMORY",SWIG_From_long(static_cast< long >(ccmc::FileReader::UNABLE_TO_ALLOCATE_MEMORY)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "VARIABLE_NOT_IN_MEMORY",SWIG_From_long(static_cast< long >(ccmc::FileReader::VARIABLE_NOT_IN_MEMORY)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "MODEL_NOT_SUPPORTED",SWIG_From_long(static_cast< long >(ccmc::FileReader::MODEL_NOT_SUPPORTED)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "NOT_A_VALID_KAMELEON_FILE",SWIG_From_long(static_cast< long >(ccmc::FileReader::NOT_A_VALID_KAMELEON_FILE)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'FileReader'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "FileReader", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "FileReader");
  d = md;
  
  /* type 'ccmc::GeneralFileReader' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__GeneralFileReader_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'GeneralFileReader'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "GeneralFileReader", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "GeneralFileReader");
  d = md;
  
  /* type 'ccmc::CDFFileReader' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__CDFFileReader_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__FileReader");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CDFFileReader' as base 'ccmc::FileReader' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CDFFileReader'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "CDFFileReader", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CDFFileReader");
  d = md;
  
  /* type 'ccmc::Position' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Position_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Position'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Position", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Position");
  d = md;
  
  /* type 'ccmc::Kameleon' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Kameleon_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Kameleon'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Kameleon", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Kameleon");
  d = md;
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cvar");
  SWIG_addvarlink(SWIG_globals(),(char*)"kameleonObjects",Swig_var_kameleonObjects_get, Swig_var_kameleonObjects_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"tracerObjects",Swig_var_tracerObjects_get, Swig_var_tracerObjects_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"interpolatorObjects",Swig_var_interpolatorObjects_get, Swig_var_interpolatorObjects_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"generalFileReaderObjects",Swig_var_generalFileReaderObjects_get, Swig_var_generalFileReaderObjects_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"timeInterpolatorObjects",Swig_var_timeInterpolatorObjects_get, Swig_var_timeInterpolatorObjects_set);
  
  /* type 'ccmc::Interpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Interpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Interpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Interpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Interpolator");
  d = md;
  
  /* type 'ccmc::KameleonInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__KameleonInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'KameleonInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'KameleonInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "KameleonInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "KameleonInterpolator");
  d = md;
  
  /* type 'ccmc::Tracer' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Tracer_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "FOWARD",SWIG_From_int(static_cast< int >(ccmc::Tracer::FOWARD)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "REVERSE",SWIG_From_int(static_cast< int >(ccmc::Tracer::REVERSE)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Tracer'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Tracer", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Tracer");
  d = md;
  
  /* type 'ccmc::Fieldline' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Fieldline_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Fieldline'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Fieldline", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Fieldline");
  d = md;
  
  /* type 'ccmc::Point3f' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Point3f_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SPHERICAL",SWIG_From_int(static_cast< int >(ccmc::Point3f::SPHERICAL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CARTESIAN",SWIG_From_int(static_cast< int >(ccmc::Point3f::CARTESIAN)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Point3f'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Point3f", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Point3f");
  d = md;
  
  /* type 'ccmc::Attribute' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Attribute_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "FLOAT",SWIG_From_int(static_cast< int >(ccmc::Attribute::FLOAT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "INT",SWIG_From_int(static_cast< int >(ccmc::Attribute::INT)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "STRING",SWIG_From_int(static_cast< int >(ccmc::Attribute::STRING)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Attribute'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Attribute", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Attribute");
  d = md;
  
  /* type 'ccmc::Model' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Model_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "BUSY",SWIG_From_int(static_cast< int >(ccmc::Model::BUSY)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "OK",SWIG_From_int(static_cast< int >(ccmc::Model::OK)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__GeneralFileReader");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Model' as base 'ccmc::GeneralFileReader' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Model'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Model", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Model");
  d = md;
  
  /* type 'ccmc::OpenGGCM' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__OpenGGCM_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Model");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'OpenGGCM' as base 'ccmc::Model' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'OpenGGCM'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "OpenGGCM", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "OpenGGCM");
  d = md;
  
  /* type 'ccmc::BATSRUS' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__BATSRUS_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Model");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BATSRUS' as base 'ccmc::Model' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BATSRUS'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "BATSRUS", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "BATSRUS");
  d = md;
  
  /* type 'ccmc::ENLIL' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__ENLIL_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Model");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ENLIL' as base 'ccmc::Model' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ENLIL'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ENLIL", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ENLIL");
  d = md;
  
  /* type 'ccmc::MAS' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__MAS_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Model");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'MAS' as base 'ccmc::Model' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'MAS'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "MAS", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "MAS");
  d = md;
  
  /* type 'ccmc::SWMFIono' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__SWMFIono_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Model");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SWMFIono' as base 'ccmc::Model' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SWMFIono'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SWMFIono", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SWMFIono");
  d = md;
  
  /* type 'ccmc::BATSRUSInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__BATSRUSInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BATSRUSInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'BATSRUSInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "BATSRUSInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "BATSRUSInterpolator");
  d = md;
  
  /* type 'ccmc::ENLILInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__ENLILInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ENLILInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ENLILInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ENLILInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ENLILInterpolator");
  d = md;
  
  /* type 'ccmc::MASInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__MASInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'MASInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'MASInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "MASInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "MASInterpolator");
  d = md;
  
  /* type 'ccmc::OpenGGCMInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__OpenGGCMInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'OpenGGCMInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'OpenGGCMInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "OpenGGCMInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "OpenGGCMInterpolator");
  d = md;
  
  /* type 'ccmc::SWMFIonoInterpolator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__SWMFIonoInterpolator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_ccmc__Interpolator");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SWMFIonoInterpolator' as base 'ccmc::Interpolator' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SWMFIonoInterpolator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SWMFIonoInterpolator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SWMFIonoInterpolator");
  d = md;
  
  /* type 'ccmc::Time' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__ccmc__Time_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Time'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Time", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Time");
  d = md;
  
  /* type '::vector< Point3f >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__vectorT_Point3f_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_point3f'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_point3f", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_point3f");
  d = md;
  
  /* type 'vector< std::string >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__vectorT_std__string_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_string'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_string", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_string");
  d = md;
  
  /* type '::vector< float >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__vectorT_float_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_float'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_float", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_float");
  d = md;
  
  /* type '::vector< Fieldline >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__vectorT_Fieldline_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_fieldline'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_fieldline", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_fieldline");
  d = md;
  
  /* type '::vector< int >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__vectorT_int_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'vector_int'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "vector_int", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "vector_int");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

