/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ccmc.wrappers;

public class Tracer {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public Tracer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Tracer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CCMCJNI.delete_Tracer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Tracer(Kameleon kameleon) {
    this(CCMCJNI.new_Tracer(Kameleon.getCPtr(kameleon), kameleon), true);
  }

  public void setInnerBoundary(float r_end) {
    CCMCJNI.Tracer_setInnerBoundary(swigCPtr, this, r_end);
  }

  public void setMaxIterations(int stepMax) {
    CCMCJNI.Tracer_setMaxIterations(swigCPtr, this, stepMax);
  }

  public void setDn(float dn) {
    CCMCJNI.Tracer_setDn(swigCPtr, this, dn);
  }

  public void setTilt(float tilt) {
    CCMCJNI.Tracer_setTilt(swigCPtr, this, tilt);
  }

  public void setMissing(float missing) {
    CCMCJNI.Tracer_setMissing(swigCPtr, this, missing);
  }

  public void setMaxArcLength(float maxArcLength) {
    CCMCJNI.Tracer_setMaxArcLength(swigCPtr, this, maxArcLength);
  }

  public Fieldline bidirectionalTrace(String variable, float startComponent1, float startComponent2, float startComponent3) {
    return new Fieldline(CCMCJNI.Tracer_bidirectionalTrace(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3), true);
  }

  public Fieldline bidirectionalTraceWithDipole(String variable, float startComponent1, float startComponent2, float startComponent3) {
    return new Fieldline(CCMCJNI.Tracer_bidirectionalTraceWithDipole(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3), true);
  }

  public Fieldline unidirectionalTrace(String variable, float startComponent1, float startComponent2, float startComponent3, Tracer.Direction dir) {
    return new Fieldline(CCMCJNI.Tracer_unidirectionalTrace__SWIG_0(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3, dir.swigValue()), true);
  }

  public Fieldline unidirectionalTrace(String variable, float startComponent1, float startComponent2, float startComponent3) {
    return new Fieldline(CCMCJNI.Tracer_unidirectionalTrace__SWIG_1(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3), true);
  }

  public Fieldline unidirectionalTraceWithDipole(String variable, float startComponent1, float startComponent2, float startComponent3, Tracer.Direction dir) {
    return new Fieldline(CCMCJNI.Tracer_unidirectionalTraceWithDipole__SWIG_0(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3, dir.swigValue()), true);
  }

  public Fieldline unidirectionalTraceWithDipole(String variable, float startComponent1, float startComponent2, float startComponent3) {
    return new Fieldline(CCMCJNI.Tracer_unidirectionalTraceWithDipole__SWIG_1(swigCPtr, this, variable, startComponent1, startComponent2, startComponent3), true);
  }

  public Fieldline findLastClosed(Point3f position, int stepMax) {
    return new Fieldline(CCMCJNI.Tracer_findLastClosed(swigCPtr, this, Point3f.getCPtr(position), position, stepMax), true);
  }

  public SWIGTYPE_p_vectorT_ccmc__Fieldline_t getLastClosedFieldlines(int numberOfFieldlines, int stepMax, int numberOfPointsPerReducedFieldline) {
    return new SWIGTYPE_p_vectorT_ccmc__Fieldline_t(CCMCJNI.Tracer_getLastClosedFieldlines(swigCPtr, this, numberOfFieldlines, stepMax, numberOfPointsPerReducedFieldline), true);
  }

  public boolean isClosed(Fieldline fieldline) {
    return CCMCJNI.Tracer_isClosed(swigCPtr, this, Fieldline.getCPtr(fieldline), fieldline);
  }

  public void setUseMaxArcLength(boolean useMaxArcLength) {
    CCMCJNI.Tracer_setUseMaxArcLength(swigCPtr, this, useMaxArcLength);
  }

  public Point3f getVector(String variable, Point3f position, SWIGTYPE_p_float dComponent1, SWIGTYPE_p_float dComponent2, SWIGTYPE_p_float dComponent3, Interpolator interpolator) {
    return new Point3f(CCMCJNI.Tracer_getVector(swigCPtr, this, variable, Point3f.getCPtr(position), position, SWIGTYPE_p_float.getCPtr(dComponent1), SWIGTYPE_p_float.getCPtr(dComponent2), SWIGTYPE_p_float.getCPtr(dComponent3), Interpolator.getCPtr(interpolator), interpolator), true);
  }

  public void setRegionOfInterest(Point3f min, Point3f max) {
    CCMCJNI.Tracer_setRegionOfInterest(swigCPtr, this, Point3f.getCPtr(min), min, Point3f.getCPtr(max), max);
  }

  public void setUseRegionOfInterest(boolean useROI) {
    CCMCJNI.Tracer_setUseRegionOfInterest(swigCPtr, this, useROI);
  }

  public final static class Direction {
    public final static Direction FOWARD = new Direction("FOWARD");
    public final static Direction REVERSE = new Direction("REVERSE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Direction swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Direction.class + " with value " + swigValue);
    }

    private Direction(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Direction(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Direction(String swigName, Direction swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Direction[] swigValues = { FOWARD, REVERSE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
